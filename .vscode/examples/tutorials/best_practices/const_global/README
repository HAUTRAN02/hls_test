The HLS compiler considers global variables to exist outside of the component.
Because the component does not own global values, the compiler is unable to
make any assumptions about the value when performing optimizations.  Even if
the testbench maintains a global variable with a constant value, the compiler
will not assume that the variable is constant in all situations.  On the other
hand, const qualified global variables are guaranteed to remain constant in
all situations.  So const qualified global variables can be folded into the
component and fully optimized.

For good quality of results, we recommend avoiding the use of mutable global
variables in a component.  Use of const qualified global variables is okay.

The report and interfaces can be used to help identify expensive references to
global variables:
  1) Compare tutorial-mutable.prj/components/scale_value_inst.v and
     tutorial-const.prj/components/scale_value_inst.v. Notice the creation of a
     scale_factor port and an Avalon-MM interface in the case of a mutable
     global.  These interfaces are used to pass the location and fetch the value
     of 'scale_factor' from an external memory.  In the const qualified case the
     constant is optimized into the datapath and does not need to be fetched.
  2) Compare tutorial-mutable.prj/reports/report.html
     tutorial-const.prj/reports/report.html and open the "Area Analysis of
     System" under "Area Analysis". Notice that the version with a mutable
     global is over 50% larger than the const qualified version. A large portion
     of this extra area is due to the additional load from global memory under
     line 'tutorial.cpp:19'.
  3) Look at tutorial-mutable.prj/reports/report.html and open the "Block
     Viewer" under "System Viewers".  Observe that, there is a block that has a
     cluster formed between the read and write of the stream.  To see what is
     inside the cluster, open the "Cluster Viewer" under "System Viewers" and
     find the same cluster under the same block. You should see a load and a
     multiplication operation inside the cluster.
     In contrast, open tutorial-const.prj/reports/report.html and observe that
     no cluster is present between the stream read and write in the "Block
     Viewer" and the multiplication operation is optimized to a shift operation.
     These contribute to why the const qualified version yields much less area
     in the "Area Analysis of System" under "Area Analysis". 

This tutorial requires the following tools to be installed:
  - Intel(R) High Level Synthesis (HLS) Compiler
  - ModelSim-SE

To run this tutorial:
  - On Linux run "make"
  - On Windows run "build"

