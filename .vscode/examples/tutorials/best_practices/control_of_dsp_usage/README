This tutorial demonstrates how setting the implementation preference of math
operations affects hardware resource utilization on your FPGA device.

You can choose one of the following implementation preferences:
  * prefer DSP-centric implementation
  * prefer soft-logic implementation
  * use compiler default implementation

For information about supported datatypes and math operations, refer to 
Intel HLS Compiler Reference Manual.

The --dsp-mode option of the i++ command lets you direct the compiler to
implement math operations in your design in the following ways:

- [--dsp-mode=default] The compiler chooses an implementation based on the
  target datatype and math operation.

- [--dsp-mode=prefer-dsp] The compiler attempts to implement math operations in 
  DSPs. If the default implementation of an operation uses DSPs, you see no
  difference in resource utilization or area. Otherwise, you will notice a
  decrease in the usage of soft logic elements.

- [--dsp-mode=prefer-softlogic] The compiler attempts to implement math
  operations in soft logic. If the operation is implemented without DSPs by
  default, you see no difference in resource utilization or area. Otherwise,
  you will notice DSPs used in your design.

You can apply this control either at a global scope with the compiler command
option shown above or at a local scope with the following library function:

  #include "HLS/math_dsp_control.h"
  ihc::math_dsp_control<ihc::Preference p, bool propagate>([&]{...});

You pass a reference-capturing lambda expression as the argument to this library 
function, and math operations inside the lambda expression are implemented 
according to the template arguments.

The first template argument is an enum type with three acceptable options:
- [ihc::Preference::DSP] Prefer math operations to be implemented in DSP-centric 
                         way (DEFAULT).
- [ihc::Preference::Softlogic] Prefer math operations to be implemented in 
                               Soft-logic.
- [ihc::Preference::Compiler_default] Compiler decides the implementation.

The second template argument is a Boolean variable that determines the 
propagation of ihc::Preference to function calls in the lambda expression:
- [True] ihc::Preference values are propagated to function calls in the lambda 
         expression function (DEFAULT)
- [False] ihc::Preference values are not propagated to function calls in the 
          lambda expression, so the preference applies only to math operations 
          directly used in the lambda expression.

Note that ihc::Preference never applies to nested math_dsp_control<>() calls.
Each nested math_dsp_control<>() call has its own ihc::Preference.

-------------------------------------------------------------------------------
part_1_global_control
-------------------------------------------------------------------------------

In part_1 we demonstrate global control and usage of command line option
'--dsp-mode'. We compile floating-point constant addition and floating-point
variable addition in part_1_global_control.cpp for three times:

1. with no option (baseline: equivalent to using --dsp-mode=default)
2. with the --dsp-mode=prefer-dsp command option
3. with the --dsp-mode=prefer-softlogic command option

The design does simple addition between two numbers and the results generated by
each component are verified by comparing them with the expected result.

You can check resource usage in the Quartus Estimated Resource Utilization table
on Summary page in the generated reports.

Key observations:

- Resource usage is the same for the default run and the run with 
  --dsp-mode=prefer-dsp command option. The compiler implements float addition 
  operation using DSPs by default, so no difference occurs.

- Resource usage for the run with --dsp-mode=prefer-softlogic command option
  uses no DSPs but more ALMs than the default run.

-------------------------------------------------------------------------------
part_2_local_control
-------------------------------------------------------------------------------

In part_2 we demonstrate local control and usage of library function 
'ihc::math_dsp_control<>()'. 

In component test_lib, we apply the library function to two floating-point 
addition operations (one constant addition and one variable addition), and the 
preference is set to soft-logic. In component test_ref, we have two identical 
floating-point addition operations as in test_lib, but without any local control.

You can check resource usage in the Quartus Estimated Resource Utilization table
on Summary page in the generated report.

Key observations:

- Component test_lib consumes no DSPs, while component test_ref uses two DSPs in 
  total, each floating-point addition operation uses one DSP.

- Component test_lib uses more ALMs than component test_ref.

For more information about global and local control of implementation 
preference, refer to the Intel HLS Compiler Reference Manual.

This tutorial requires the following tools to be installed:
  - Intel(R) High Level Synthesis (HLS) Compiler
  - ModelSim

To run this tutorial:
  - On Linux run "make"
  - On Windows run "build"
