// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) HLS Compiler, Version 21.4.0 Build 53.1

/////////////////////////////////////////////////////////////////
// MODULE pred_internal
/////////////////////////////////////////////////////////////////
module pred_internal
(
   input logic clock,
   input logic resetn,
   input logic start,
   output logic busy,
   output logic done,
   input logic stall,
   // AVS avs_b_conv1
   input logic avs_b_conv1_enable,
   input logic avs_b_conv1_read,
   input logic avs_b_conv1_write,
   input logic [2:0] avs_b_conv1_address,
   input logic [31:0] avs_b_conv1_writedata,
   input logic [3:0] avs_b_conv1_byteenable,
   output logic [31:0] avs_b_conv1_readdata,
   output logic avs_b_conv1_readdatavalid,
   // AVS avs_b_conv2
   input logic avs_b_conv2_enable,
   input logic avs_b_conv2_read,
   input logic avs_b_conv2_write,
   input logic [3:0] avs_b_conv2_address,
   input logic [31:0] avs_b_conv2_writedata,
   input logic [3:0] avs_b_conv2_byteenable,
   output logic [31:0] avs_b_conv2_readdata,
   output logic avs_b_conv2_readdatavalid,
   // AVS avs_b_fc1
   input logic avs_b_fc1_enable,
   input logic avs_b_fc1_read,
   input logic avs_b_fc1_write,
   input logic [6:0] avs_b_fc1_address,
   input logic [31:0] avs_b_fc1_writedata,
   input logic [3:0] avs_b_fc1_byteenable,
   output logic [31:0] avs_b_fc1_readdata,
   output logic avs_b_fc1_readdatavalid,
   // AVS avs_b_fc2
   input logic avs_b_fc2_enable,
   input logic avs_b_fc2_read,
   input logic avs_b_fc2_write,
   input logic [6:0] avs_b_fc2_address,
   input logic [31:0] avs_b_fc2_writedata,
   input logic [3:0] avs_b_fc2_byteenable,
   output logic [31:0] avs_b_fc2_readdata,
   output logic avs_b_fc2_readdatavalid,
   // AVS avs_b_fc3
   input logic avs_b_fc3_enable,
   input logic avs_b_fc3_read,
   input logic avs_b_fc3_write,
   input logic [3:0] avs_b_fc3_address,
   input logic [31:0] avs_b_fc3_writedata,
   input logic [3:0] avs_b_fc3_byteenable,
   output logic [31:0] avs_b_fc3_readdata,
   output logic avs_b_fc3_readdatavalid,
   // AVS avs_image
   input logic avs_image_enable,
   input logic avs_image_read,
   input logic avs_image_write,
   input logic [9:0] avs_image_address,
   input logic [31:0] avs_image_writedata,
   input logic [3:0] avs_image_byteenable,
   output logic [31:0] avs_image_readdata,
   output logic avs_image_readdatavalid,
   // AVS avs_probs
   input logic avs_probs_enable,
   input logic avs_probs_read,
   input logic avs_probs_write,
   input logic [3:0] avs_probs_address,
   input logic [31:0] avs_probs_writedata,
   input logic [3:0] avs_probs_byteenable,
   output logic [31:0] avs_probs_readdata,
   output logic avs_probs_readdatavalid,
   // AVS avs_w_conv1
   input logic avs_w_conv1_enable,
   input logic avs_w_conv1_read,
   input logic avs_w_conv1_write,
   input logic [2:0] avs_w_conv1_address,
   input logic [31:0] avs_w_conv1_writedata,
   input logic [3:0] avs_w_conv1_byteenable,
   output logic [31:0] avs_w_conv1_readdata,
   output logic avs_w_conv1_readdatavalid,
   // AVS avs_w_conv2
   input logic avs_w_conv2_enable,
   input logic avs_w_conv2_read,
   input logic avs_w_conv2_write,
   input logic [11:0] avs_w_conv2_address,
   input logic [31:0] avs_w_conv2_writedata,
   input logic [3:0] avs_w_conv2_byteenable,
   output logic [31:0] avs_w_conv2_readdata,
   output logic avs_w_conv2_readdatavalid,
   // AVS avs_w_fc1
   input logic avs_w_fc1_enable,
   input logic avs_w_fc1_read,
   input logic avs_w_fc1_write,
   input logic [15:0] avs_w_fc1_address,
   input logic [31:0] avs_w_fc1_writedata,
   input logic [3:0] avs_w_fc1_byteenable,
   output logic [31:0] avs_w_fc1_readdata,
   output logic avs_w_fc1_readdatavalid,
   // AVS avs_w_fc2
   input logic avs_w_fc2_enable,
   input logic avs_w_fc2_read,
   input logic avs_w_fc2_write,
   input logic [13:0] avs_w_fc2_address,
   input logic [31:0] avs_w_fc2_writedata,
   input logic [3:0] avs_w_fc2_byteenable,
   output logic [31:0] avs_w_fc2_readdata,
   output logic avs_w_fc2_readdatavalid,
   // AVS avs_w_fc3
   input logic avs_w_fc3_enable,
   input logic avs_w_fc3_read,
   input logic avs_w_fc3_write,
   input logic [9:0] avs_w_fc3_address,
   input logic [31:0] avs_w_fc3_writedata,
   input logic [3:0] avs_w_fc3_byteenable,
   output logic [31:0] avs_w_fc3_readdata,
   output logic avs_w_fc3_readdatavalid
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   genvar __o;
   genvar __p;
   genvar __q;
   genvar __r;
   genvar __s;
   genvar __t;
   genvar __u;
   genvar __v;
   genvar __w;
   genvar __x;
   genvar __y;
   genvar __z;
   genvar __a;
   genvar __b;
   genvar __c;
   genvar __d;
   genvar __e;
   genvar __f;
   logic local_avm_aspace64_enable [1][1];
   logic local_avm_aspace64_read [1][1];
   logic local_avm_aspace64_write [1][1];
   logic [31:0] local_avm_aspace64_address [1][1];
   logic [31:0] local_avm_aspace64_writedata [1][1];
   logic [3:0] local_avm_aspace64_byteenable [1][1];
   logic local_avm_aspace64_waitrequest [1][1];
   logic [31:0] local_avm_aspace64_readdata [1][1];
   logic local_avm_aspace64_readdatavalid [1][1];
   logic local_avm_aspace64_burstcount [1][1];
   logic local_avm_aspace64_writeack [1][1];
   logic local_avm_aspace65_enable [1][3];
   logic local_avm_aspace65_read [1][3];
   logic local_avm_aspace65_write [1][3];
   logic [31:0] local_avm_aspace65_address [1][3];
   logic [63:0] local_avm_aspace65_writedata [1][3];
   logic [7:0] local_avm_aspace65_byteenable [1][3];
   logic local_avm_aspace65_waitrequest [1][3];
   logic [63:0] local_avm_aspace65_readdata [1][3];
   logic local_avm_aspace65_readdatavalid [1][3];
   logic local_avm_aspace65_burstcount [1][3];
   logic local_avm_aspace65_writeack [1][3];
   logic local_avm_aspace66_enable [1][2];
   logic local_avm_aspace66_read [1][2];
   logic local_avm_aspace66_write [1][2];
   logic [31:0] local_avm_aspace66_address [1][2];
   logic [31:0] local_avm_aspace66_writedata [1][2];
   logic [3:0] local_avm_aspace66_byteenable [1][2];
   logic local_avm_aspace66_waitrequest [1][2];
   logic [31:0] local_avm_aspace66_readdata [1][2];
   logic local_avm_aspace66_readdatavalid [1][2];
   logic local_avm_aspace66_burstcount [1][2];
   logic local_avm_aspace66_writeack [1][2];
   logic local_avm_aspace67_enable [1][2];
   logic local_avm_aspace67_read [1][2];
   logic local_avm_aspace67_write [1][2];
   logic [31:0] local_avm_aspace67_address [1][2];
   logic [31:0] local_avm_aspace67_writedata [1][2];
   logic [3:0] local_avm_aspace67_byteenable [1][2];
   logic local_avm_aspace67_waitrequest [1][2];
   logic [31:0] local_avm_aspace67_readdata [1][2];
   logic local_avm_aspace67_readdatavalid [1][2];
   logic local_avm_aspace67_burstcount [1][2];
   logic local_avm_aspace67_writeack [1][2];
   logic local_avm_aspace68_enable [1][3];
   logic local_avm_aspace68_read [1][3];
   logic local_avm_aspace68_write [1][3];
   logic [31:0] local_avm_aspace68_address [1][3];
   logic [63:0] local_avm_aspace68_writedata [1][3];
   logic [7:0] local_avm_aspace68_byteenable [1][3];
   logic local_avm_aspace68_waitrequest [1][3];
   logic [63:0] local_avm_aspace68_readdata [1][3];
   logic local_avm_aspace68_readdatavalid [1][3];
   logic local_avm_aspace68_burstcount [1][3];
   logic local_avm_aspace68_writeack [1][3];
   logic local_avm_aspace69_enable [1][1];
   logic local_avm_aspace69_read [1][1];
   logic local_avm_aspace69_write [1][1];
   logic [31:0] local_avm_aspace69_address [1][1];
   logic [31:0] local_avm_aspace69_writedata [1][1];
   logic [3:0] local_avm_aspace69_byteenable [1][1];
   logic local_avm_aspace69_waitrequest [1][1];
   logic [31:0] local_avm_aspace69_readdata [1][1];
   logic local_avm_aspace69_readdatavalid [1][1];
   logic local_avm_aspace69_burstcount [1][1];
   logic local_avm_aspace69_writeack [1][1];
   logic local_avm_aspace70_enable [1][2];
   logic local_avm_aspace70_read [1][2];
   logic local_avm_aspace70_write [1][2];
   logic [31:0] local_avm_aspace70_address [1][2];
   logic [31:0] local_avm_aspace70_writedata [1][2];
   logic [3:0] local_avm_aspace70_byteenable [1][2];
   logic local_avm_aspace70_waitrequest [1][2];
   logic [31:0] local_avm_aspace70_readdata [1][2];
   logic local_avm_aspace70_readdatavalid [1][2];
   logic local_avm_aspace70_burstcount [1][2];
   logic local_avm_aspace70_writeack [1][2];
   logic local_avm_aspace71_enable [1][2];
   logic local_avm_aspace71_read [1][2];
   logic local_avm_aspace71_write [1][2];
   logic [31:0] local_avm_aspace71_address [1][2];
   logic [31:0] local_avm_aspace71_writedata [1][2];
   logic [3:0] local_avm_aspace71_byteenable [1][2];
   logic local_avm_aspace71_waitrequest [1][2];
   logic [31:0] local_avm_aspace71_readdata [1][2];
   logic local_avm_aspace71_readdatavalid [1][2];
   logic local_avm_aspace71_burstcount [1][2];
   logic local_avm_aspace71_writeack [1][2];
   logic local_avm_aspace72_enable [1][2];
   logic local_avm_aspace72_read [1][2];
   logic local_avm_aspace72_write [1][2];
   logic [31:0] local_avm_aspace72_address [1][2];
   logic [31:0] local_avm_aspace72_writedata [1][2];
   logic [3:0] local_avm_aspace72_byteenable [1][2];
   logic local_avm_aspace72_waitrequest [1][2];
   logic [31:0] local_avm_aspace72_readdata [1][2];
   logic local_avm_aspace72_readdatavalid [1][2];
   logic local_avm_aspace72_burstcount [1][2];
   logic local_avm_aspace72_writeack [1][2];
   logic local_avm_aspace73_enable [1][2];
   logic local_avm_aspace73_read [1][2];
   logic local_avm_aspace73_write [1][2];
   logic [31:0] local_avm_aspace73_address [1][2];
   logic [31:0] local_avm_aspace73_writedata [1][2];
   logic [3:0] local_avm_aspace73_byteenable [1][2];
   logic local_avm_aspace73_waitrequest [1][2];
   logic [31:0] local_avm_aspace73_readdata [1][2];
   logic local_avm_aspace73_readdatavalid [1][2];
   logic local_avm_aspace73_burstcount [1][2];
   logic local_avm_aspace73_writeack [1][2];
   logic local_avm_aspace74_enable [1][2];
   logic local_avm_aspace74_read [1][2];
   logic local_avm_aspace74_write [1][2];
   logic [31:0] local_avm_aspace74_address [1][2];
   logic [31:0] local_avm_aspace74_writedata [1][2];
   logic [3:0] local_avm_aspace74_byteenable [1][2];
   logic local_avm_aspace74_waitrequest [1][2];
   logic [31:0] local_avm_aspace74_readdata [1][2];
   logic local_avm_aspace74_readdatavalid [1][2];
   logic local_avm_aspace74_burstcount [1][2];
   logic local_avm_aspace74_writeack [1][2];
   logic local_avm_aspace75_enable [1][3];
   logic local_avm_aspace75_read [1][3];
   logic local_avm_aspace75_write [1][3];
   logic [31:0] local_avm_aspace75_address [1][3];
   logic [31:0] local_avm_aspace75_writedata [1][3];
   logic [3:0] local_avm_aspace75_byteenable [1][3];
   logic local_avm_aspace75_waitrequest [1][3];
   logic [31:0] local_avm_aspace75_readdata [1][3];
   logic local_avm_aspace75_readdatavalid [1][3];
   logic local_avm_aspace75_burstcount [1][3];
   logic local_avm_aspace75_writeack [1][3];
   logic local_avm_aspace76_enable [1][3];
   logic local_avm_aspace76_read [1][3];
   logic local_avm_aspace76_write [1][3];
   logic [31:0] local_avm_aspace76_address [1][3];
   logic [31:0] local_avm_aspace76_writedata [1][3];
   logic [3:0] local_avm_aspace76_byteenable [1][3];
   logic local_avm_aspace76_waitrequest [1][3];
   logic [31:0] local_avm_aspace76_readdata [1][3];
   logic local_avm_aspace76_readdatavalid [1][3];
   logic local_avm_aspace76_burstcount [1][3];
   logic local_avm_aspace76_writeack [1][3];
   logic local_avm_aspace77_enable [1][3];
   logic local_avm_aspace77_read [1][3];
   logic local_avm_aspace77_write [1][3];
   logic [31:0] local_avm_aspace77_address [1][3];
   logic [31:0] local_avm_aspace77_writedata [1][3];
   logic [3:0] local_avm_aspace77_byteenable [1][3];
   logic local_avm_aspace77_waitrequest [1][3];
   logic [31:0] local_avm_aspace77_readdata [1][3];
   logic local_avm_aspace77_readdatavalid [1][3];
   logic local_avm_aspace77_burstcount [1][3];
   logic local_avm_aspace77_writeack [1][3];
   logic local_avm_aspace78_enable [1][3];
   logic local_avm_aspace78_read [1][3];
   logic local_avm_aspace78_write [1][3];
   logic [31:0] local_avm_aspace78_address [1][3];
   logic [31:0] local_avm_aspace78_writedata [1][3];
   logic [3:0] local_avm_aspace78_byteenable [1][3];
   logic local_avm_aspace78_waitrequest [1][3];
   logic [31:0] local_avm_aspace78_readdata [1][3];
   logic local_avm_aspace78_readdatavalid [1][3];
   logic local_avm_aspace78_burstcount [1][3];
   logic local_avm_aspace78_writeack [1][3];
   logic local_avm_aspace79_enable [1][3];
   logic local_avm_aspace79_read [1][3];
   logic local_avm_aspace79_write [1][3];
   logic [31:0] local_avm_aspace79_address [1][3];
   logic [31:0] local_avm_aspace79_writedata [1][3];
   logic [3:0] local_avm_aspace79_byteenable [1][3];
   logic local_avm_aspace79_waitrequest [1][3];
   logic [31:0] local_avm_aspace79_readdata [1][3];
   logic local_avm_aspace79_readdatavalid [1][3];
   logic local_avm_aspace79_burstcount [1][3];
   logic local_avm_aspace79_writeack [1][3];
   logic local_avm_aspace80_enable [1][3];
   logic local_avm_aspace80_read [1][3];
   logic local_avm_aspace80_write [1][3];
   logic [31:0] local_avm_aspace80_address [1][3];
   logic [31:0] local_avm_aspace80_writedata [1][3];
   logic [3:0] local_avm_aspace80_byteenable [1][3];
   logic local_avm_aspace80_waitrequest [1][3];
   logic [31:0] local_avm_aspace80_readdata [1][3];
   logic local_avm_aspace80_readdatavalid [1][3];
   logic local_avm_aspace80_burstcount [1][3];
   logic local_avm_aspace80_writeack [1][3];
   logic local_avm_aspace81_enable [1][3];
   logic local_avm_aspace81_read [1][3];
   logic local_avm_aspace81_write [1][3];
   logic [31:0] local_avm_aspace81_address [1][3];
   logic [31:0] local_avm_aspace81_writedata [1][3];
   logic [3:0] local_avm_aspace81_byteenable [1][3];
   logic local_avm_aspace81_waitrequest [1][3];
   logic [31:0] local_avm_aspace81_readdata [1][3];
   logic local_avm_aspace81_readdatavalid [1][3];
   logic local_avm_aspace81_burstcount [1][3];
   logic local_avm_aspace81_writeack [1][3];
   logic local_avm_aspace82_enable [1][3];
   logic local_avm_aspace82_read [1][3];
   logic local_avm_aspace82_write [1][3];
   logic [31:0] local_avm_aspace82_address [1][3];
   logic [31:0] local_avm_aspace82_writedata [1][3];
   logic [3:0] local_avm_aspace82_byteenable [1][3];
   logic local_avm_aspace82_waitrequest [1][3];
   logic [31:0] local_avm_aspace82_readdata [1][3];
   logic local_avm_aspace82_readdatavalid [1][3];
   logic local_avm_aspace82_burstcount [1][3];
   logic local_avm_aspace82_writeack [1][3];
   logic local_avm_aspace83_enable [1][3];
   logic local_avm_aspace83_read [1][3];
   logic local_avm_aspace83_write [1][3];
   logic [31:0] local_avm_aspace83_address [1][3];
   logic [31:0] local_avm_aspace83_writedata [1][3];
   logic [3:0] local_avm_aspace83_byteenable [1][3];
   logic local_avm_aspace83_waitrequest [1][3];
   logic [31:0] local_avm_aspace83_readdata [1][3];
   logic local_avm_aspace83_readdatavalid [1][3];
   logic local_avm_aspace83_burstcount [1][3];
   logic local_avm_aspace83_writeack [1][3];
   logic local_avm_aspace84_enable [1][3];
   logic local_avm_aspace84_read [1][3];
   logic local_avm_aspace84_write [1][3];
   logic [31:0] local_avm_aspace84_address [1][3];
   logic [31:0] local_avm_aspace84_writedata [1][3];
   logic [3:0] local_avm_aspace84_byteenable [1][3];
   logic local_avm_aspace84_waitrequest [1][3];
   logic [31:0] local_avm_aspace84_readdata [1][3];
   logic local_avm_aspace84_readdatavalid [1][3];
   logic local_avm_aspace84_burstcount [1][3];
   logic local_avm_aspace84_writeack [1][3];
   logic local_avm_aspace85_enable [1][3];
   logic local_avm_aspace85_read [1][3];
   logic local_avm_aspace85_write [1][3];
   logic [31:0] local_avm_aspace85_address [1][3];
   logic [31:0] local_avm_aspace85_writedata [1][3];
   logic [3:0] local_avm_aspace85_byteenable [1][3];
   logic local_avm_aspace85_waitrequest [1][3];
   logic [31:0] local_avm_aspace85_readdata [1][3];
   logic local_avm_aspace85_readdatavalid [1][3];
   logic local_avm_aspace85_burstcount [1][3];
   logic local_avm_aspace85_writeack [1][3];
   logic local_avm_aspace86_enable [1][3];
   logic local_avm_aspace86_read [1][3];
   logic local_avm_aspace86_write [1][3];
   logic [31:0] local_avm_aspace86_address [1][3];
   logic [31:0] local_avm_aspace86_writedata [1][3];
   logic [3:0] local_avm_aspace86_byteenable [1][3];
   logic local_avm_aspace86_waitrequest [1][3];
   logic [31:0] local_avm_aspace86_readdata [1][3];
   logic local_avm_aspace86_readdatavalid [1][3];
   logic local_avm_aspace86_burstcount [1][3];
   logic local_avm_aspace86_writeack [1][3];

   // INST pred_internal of pred_function_wrapper
   pred_function_wrapper pred_internal
   (
      .clock(clock),
      .resetn(resetn),
      .start(start),
      .busy(busy),
      .done(done),
      .stall(stall),
      // AVM avm_unnamed_pred10_pred
      .avm_unnamed_pred10_pred_enable(local_avm_aspace64_enable[0][0]),
      .avm_unnamed_pred10_pred_read(local_avm_aspace64_read[0][0]),
      .avm_unnamed_pred10_pred_write(local_avm_aspace64_write[0][0]),
      .avm_unnamed_pred10_pred_address(local_avm_aspace64_address[0][0]),
      .avm_unnamed_pred10_pred_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_unnamed_pred10_pred_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_unnamed_pred10_pred_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_unnamed_pred10_pred_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_unnamed_pred10_pred_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_unnamed_pred10_pred_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_unnamed_pred10_pred_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_memcoalesce_load_pred_fpgaunique_84_pred
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_enable(local_avm_aspace65_enable[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_read(local_avm_aspace65_read[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_write(local_avm_aspace65_write[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_address(local_avm_aspace65_address[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_writedata(local_avm_aspace65_writedata[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_byteenable(local_avm_aspace65_byteenable[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_waitrequest(local_avm_aspace65_waitrequest[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_readdata(local_avm_aspace65_readdata[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_readdatavalid(local_avm_aspace65_readdatavalid[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_burstcount(local_avm_aspace65_burstcount[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_84_pred_writeack(local_avm_aspace65_writeack[0][0]),
      // AVM avm_memcoalesce_load_pred_fpgaunique_95_pred
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_enable(local_avm_aspace65_enable[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_read(local_avm_aspace65_read[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_write(local_avm_aspace65_write[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_address(local_avm_aspace65_address[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_writedata(local_avm_aspace65_writedata[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_byteenable(local_avm_aspace65_byteenable[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_waitrequest(local_avm_aspace65_waitrequest[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_readdata(local_avm_aspace65_readdata[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_readdatavalid(local_avm_aspace65_readdatavalid[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_burstcount(local_avm_aspace65_burstcount[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_95_pred_writeack(local_avm_aspace65_writeack[0][1]),
      // AVM avm_memdep_pred
      .avm_memdep_pred_enable(local_avm_aspace65_enable[0][2]),
      .avm_memdep_pred_read(local_avm_aspace65_read[0][2]),
      .avm_memdep_pred_write(local_avm_aspace65_write[0][2]),
      .avm_memdep_pred_address(local_avm_aspace65_address[0][2]),
      .avm_memdep_pred_writedata(local_avm_aspace65_writedata[0][2]),
      .avm_memdep_pred_byteenable(local_avm_aspace65_byteenable[0][2]),
      .avm_memdep_pred_waitrequest(local_avm_aspace65_waitrequest[0][2]),
      .avm_memdep_pred_readdata(local_avm_aspace65_readdata[0][2]),
      .avm_memdep_pred_readdatavalid(local_avm_aspace65_readdatavalid[0][2]),
      .avm_memdep_pred_burstcount(local_avm_aspace65_burstcount[0][2]),
      .avm_memdep_pred_writeack(local_avm_aspace65_writeack[0][2]),
      // AVM avm_memdep_15_pred
      .avm_memdep_15_pred_enable(local_avm_aspace66_enable[0][0]),
      .avm_memdep_15_pred_read(local_avm_aspace66_read[0][0]),
      .avm_memdep_15_pred_write(local_avm_aspace66_write[0][0]),
      .avm_memdep_15_pred_address(local_avm_aspace66_address[0][0]),
      .avm_memdep_15_pred_writedata(local_avm_aspace66_writedata[0][0]),
      .avm_memdep_15_pred_byteenable(local_avm_aspace66_byteenable[0][0]),
      .avm_memdep_15_pred_waitrequest(local_avm_aspace66_waitrequest[0][0]),
      .avm_memdep_15_pred_readdata(local_avm_aspace66_readdata[0][0]),
      .avm_memdep_15_pred_readdatavalid(local_avm_aspace66_readdatavalid[0][0]),
      .avm_memdep_15_pred_burstcount(local_avm_aspace66_burstcount[0][0]),
      .avm_memdep_15_pred_writeack(local_avm_aspace66_writeack[0][0]),
      // AVM avm_unnamed_pred12_pred
      .avm_unnamed_pred12_pred_enable(local_avm_aspace66_enable[0][1]),
      .avm_unnamed_pred12_pred_read(local_avm_aspace66_read[0][1]),
      .avm_unnamed_pred12_pred_write(local_avm_aspace66_write[0][1]),
      .avm_unnamed_pred12_pred_address(local_avm_aspace66_address[0][1]),
      .avm_unnamed_pred12_pred_writedata(local_avm_aspace66_writedata[0][1]),
      .avm_unnamed_pred12_pred_byteenable(local_avm_aspace66_byteenable[0][1]),
      .avm_unnamed_pred12_pred_waitrequest(local_avm_aspace66_waitrequest[0][1]),
      .avm_unnamed_pred12_pred_readdata(local_avm_aspace66_readdata[0][1]),
      .avm_unnamed_pred12_pred_readdatavalid(local_avm_aspace66_readdatavalid[0][1]),
      .avm_unnamed_pred12_pred_burstcount(local_avm_aspace66_burstcount[0][1]),
      .avm_unnamed_pred12_pred_writeack(local_avm_aspace66_writeack[0][1]),
      // AVM avm_arrayidx74_i_promoted6_pred
      .avm_arrayidx74_i_promoted6_pred_enable(local_avm_aspace67_enable[0][0]),
      .avm_arrayidx74_i_promoted6_pred_read(local_avm_aspace67_read[0][0]),
      .avm_arrayidx74_i_promoted6_pred_write(local_avm_aspace67_write[0][0]),
      .avm_arrayidx74_i_promoted6_pred_address(local_avm_aspace67_address[0][0]),
      .avm_arrayidx74_i_promoted6_pred_writedata(local_avm_aspace67_writedata[0][0]),
      .avm_arrayidx74_i_promoted6_pred_byteenable(local_avm_aspace67_byteenable[0][0]),
      .avm_arrayidx74_i_promoted6_pred_waitrequest(local_avm_aspace67_waitrequest[0][0]),
      .avm_arrayidx74_i_promoted6_pred_readdata(local_avm_aspace67_readdata[0][0]),
      .avm_arrayidx74_i_promoted6_pred_readdatavalid(local_avm_aspace67_readdatavalid[0][0]),
      .avm_arrayidx74_i_promoted6_pred_burstcount(local_avm_aspace67_burstcount[0][0]),
      .avm_arrayidx74_i_promoted6_pred_writeack(local_avm_aspace67_writeack[0][0]),
      // AVM avm_memdep_16_pred
      .avm_memdep_16_pred_enable(local_avm_aspace67_enable[0][1]),
      .avm_memdep_16_pred_read(local_avm_aspace67_read[0][1]),
      .avm_memdep_16_pred_write(local_avm_aspace67_write[0][1]),
      .avm_memdep_16_pred_address(local_avm_aspace67_address[0][1]),
      .avm_memdep_16_pred_writedata(local_avm_aspace67_writedata[0][1]),
      .avm_memdep_16_pred_byteenable(local_avm_aspace67_byteenable[0][1]),
      .avm_memdep_16_pred_waitrequest(local_avm_aspace67_waitrequest[0][1]),
      .avm_memdep_16_pred_readdata(local_avm_aspace67_readdata[0][1]),
      .avm_memdep_16_pred_readdatavalid(local_avm_aspace67_readdatavalid[0][1]),
      .avm_memdep_16_pred_burstcount(local_avm_aspace67_burstcount[0][1]),
      .avm_memdep_16_pred_writeack(local_avm_aspace67_writeack[0][1]),
      // AVM avm_memcoalesce_load_pred_fpgaunique_107_pred
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_enable(local_avm_aspace68_enable[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_read(local_avm_aspace68_read[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_write(local_avm_aspace68_write[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_address(local_avm_aspace68_address[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_writedata(local_avm_aspace68_writedata[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_byteenable(local_avm_aspace68_byteenable[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_waitrequest(local_avm_aspace68_waitrequest[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_readdata(local_avm_aspace68_readdata[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_readdatavalid(local_avm_aspace68_readdatavalid[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_burstcount(local_avm_aspace68_burstcount[0][0]),
      .avm_memcoalesce_load_pred_fpgaunique_107_pred_writeack(local_avm_aspace68_writeack[0][0]),
      // AVM avm_memcoalesce_load_pred_fpgaunique_118_pred
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_enable(local_avm_aspace68_enable[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_read(local_avm_aspace68_read[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_write(local_avm_aspace68_write[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_address(local_avm_aspace68_address[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_writedata(local_avm_aspace68_writedata[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_byteenable(local_avm_aspace68_byteenable[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_waitrequest(local_avm_aspace68_waitrequest[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_readdata(local_avm_aspace68_readdata[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_readdatavalid(local_avm_aspace68_readdatavalid[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_burstcount(local_avm_aspace68_burstcount[0][1]),
      .avm_memcoalesce_load_pred_fpgaunique_118_pred_writeack(local_avm_aspace68_writeack[0][1]),
      // AVM avm_memdep_17_pred
      .avm_memdep_17_pred_enable(local_avm_aspace68_enable[0][2]),
      .avm_memdep_17_pred_read(local_avm_aspace68_read[0][2]),
      .avm_memdep_17_pred_write(local_avm_aspace68_write[0][2]),
      .avm_memdep_17_pred_address(local_avm_aspace68_address[0][2]),
      .avm_memdep_17_pred_writedata(local_avm_aspace68_writedata[0][2]),
      .avm_memdep_17_pred_byteenable(local_avm_aspace68_byteenable[0][2]),
      .avm_memdep_17_pred_waitrequest(local_avm_aspace68_waitrequest[0][2]),
      .avm_memdep_17_pred_readdata(local_avm_aspace68_readdata[0][2]),
      .avm_memdep_17_pred_readdatavalid(local_avm_aspace68_readdatavalid[0][2]),
      .avm_memdep_17_pred_burstcount(local_avm_aspace68_burstcount[0][2]),
      .avm_memdep_17_pred_writeack(local_avm_aspace68_writeack[0][2]),
      // AVM avm_unnamed_pred15_pred
      .avm_unnamed_pred15_pred_enable(local_avm_aspace69_enable[0][0]),
      .avm_unnamed_pred15_pred_read(local_avm_aspace69_read[0][0]),
      .avm_unnamed_pred15_pred_write(local_avm_aspace69_write[0][0]),
      .avm_unnamed_pred15_pred_address(local_avm_aspace69_address[0][0]),
      .avm_unnamed_pred15_pred_writedata(local_avm_aspace69_writedata[0][0]),
      .avm_unnamed_pred15_pred_byteenable(local_avm_aspace69_byteenable[0][0]),
      .avm_unnamed_pred15_pred_waitrequest(local_avm_aspace69_waitrequest[0][0]),
      .avm_unnamed_pred15_pred_readdata(local_avm_aspace69_readdata[0][0]),
      .avm_unnamed_pred15_pred_readdatavalid(local_avm_aspace69_readdatavalid[0][0]),
      .avm_unnamed_pred15_pred_burstcount(local_avm_aspace69_burstcount[0][0]),
      .avm_unnamed_pred15_pred_writeack(local_avm_aspace69_writeack[0][0]),
      // AVM avm_memdep_18_pred
      .avm_memdep_18_pred_enable(local_avm_aspace70_enable[0][0]),
      .avm_memdep_18_pred_read(local_avm_aspace70_read[0][0]),
      .avm_memdep_18_pred_write(local_avm_aspace70_write[0][0]),
      .avm_memdep_18_pred_address(local_avm_aspace70_address[0][0]),
      .avm_memdep_18_pred_writedata(local_avm_aspace70_writedata[0][0]),
      .avm_memdep_18_pred_byteenable(local_avm_aspace70_byteenable[0][0]),
      .avm_memdep_18_pred_waitrequest(local_avm_aspace70_waitrequest[0][0]),
      .avm_memdep_18_pred_readdata(local_avm_aspace70_readdata[0][0]),
      .avm_memdep_18_pred_readdatavalid(local_avm_aspace70_readdatavalid[0][0]),
      .avm_memdep_18_pred_burstcount(local_avm_aspace70_burstcount[0][0]),
      .avm_memdep_18_pred_writeack(local_avm_aspace70_writeack[0][0]),
      // AVM avm_unnamed_pred17_pred
      .avm_unnamed_pred17_pred_enable(local_avm_aspace70_enable[0][1]),
      .avm_unnamed_pred17_pred_read(local_avm_aspace70_read[0][1]),
      .avm_unnamed_pred17_pred_write(local_avm_aspace70_write[0][1]),
      .avm_unnamed_pred17_pred_address(local_avm_aspace70_address[0][1]),
      .avm_unnamed_pred17_pred_writedata(local_avm_aspace70_writedata[0][1]),
      .avm_unnamed_pred17_pred_byteenable(local_avm_aspace70_byteenable[0][1]),
      .avm_unnamed_pred17_pred_waitrequest(local_avm_aspace70_waitrequest[0][1]),
      .avm_unnamed_pred17_pred_readdata(local_avm_aspace70_readdata[0][1]),
      .avm_unnamed_pred17_pred_readdatavalid(local_avm_aspace70_readdatavalid[0][1]),
      .avm_unnamed_pred17_pred_burstcount(local_avm_aspace70_burstcount[0][1]),
      .avm_unnamed_pred17_pred_writeack(local_avm_aspace70_writeack[0][1]),
      // AVM avm_arrayidx21_i145_promoted_pre_lm91666_pred
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_enable(local_avm_aspace71_enable[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_read(local_avm_aspace71_read[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_write(local_avm_aspace71_write[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_address(local_avm_aspace71_address[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_writedata(local_avm_aspace71_writedata[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_byteenable(local_avm_aspace71_byteenable[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_waitrequest(local_avm_aspace71_waitrequest[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_readdata(local_avm_aspace71_readdata[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_readdatavalid(local_avm_aspace71_readdatavalid[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_burstcount(local_avm_aspace71_burstcount[0][0]),
      .avm_arrayidx21_i145_promoted_pre_lm91666_pred_writeack(local_avm_aspace71_writeack[0][0]),
      // AVM avm_memdep_191665_pred
      .avm_memdep_191665_pred_enable(local_avm_aspace71_enable[0][1]),
      .avm_memdep_191665_pred_read(local_avm_aspace71_read[0][1]),
      .avm_memdep_191665_pred_write(local_avm_aspace71_write[0][1]),
      .avm_memdep_191665_pred_address(local_avm_aspace71_address[0][1]),
      .avm_memdep_191665_pred_writedata(local_avm_aspace71_writedata[0][1]),
      .avm_memdep_191665_pred_byteenable(local_avm_aspace71_byteenable[0][1]),
      .avm_memdep_191665_pred_waitrequest(local_avm_aspace71_waitrequest[0][1]),
      .avm_memdep_191665_pred_readdata(local_avm_aspace71_readdata[0][1]),
      .avm_memdep_191665_pred_readdatavalid(local_avm_aspace71_readdatavalid[0][1]),
      .avm_memdep_191665_pred_burstcount(local_avm_aspace71_burstcount[0][1]),
      .avm_memdep_191665_pred_writeack(local_avm_aspace71_writeack[0][1]),
      // AVM avm_memdep_20_pred
      .avm_memdep_20_pred_enable(local_avm_aspace72_enable[0][0]),
      .avm_memdep_20_pred_read(local_avm_aspace72_read[0][0]),
      .avm_memdep_20_pred_write(local_avm_aspace72_write[0][0]),
      .avm_memdep_20_pred_address(local_avm_aspace72_address[0][0]),
      .avm_memdep_20_pred_writedata(local_avm_aspace72_writedata[0][0]),
      .avm_memdep_20_pred_byteenable(local_avm_aspace72_byteenable[0][0]),
      .avm_memdep_20_pred_waitrequest(local_avm_aspace72_waitrequest[0][0]),
      .avm_memdep_20_pred_readdata(local_avm_aspace72_readdata[0][0]),
      .avm_memdep_20_pred_readdatavalid(local_avm_aspace72_readdatavalid[0][0]),
      .avm_memdep_20_pred_burstcount(local_avm_aspace72_burstcount[0][0]),
      .avm_memdep_20_pred_writeack(local_avm_aspace72_writeack[0][0]),
      // AVM avm_unnamed_pred20_pred
      .avm_unnamed_pred20_pred_enable(local_avm_aspace72_enable[0][1]),
      .avm_unnamed_pred20_pred_read(local_avm_aspace72_read[0][1]),
      .avm_unnamed_pred20_pred_write(local_avm_aspace72_write[0][1]),
      .avm_unnamed_pred20_pred_address(local_avm_aspace72_address[0][1]),
      .avm_unnamed_pred20_pred_writedata(local_avm_aspace72_writedata[0][1]),
      .avm_unnamed_pred20_pred_byteenable(local_avm_aspace72_byteenable[0][1]),
      .avm_unnamed_pred20_pred_waitrequest(local_avm_aspace72_waitrequest[0][1]),
      .avm_unnamed_pred20_pred_readdata(local_avm_aspace72_readdata[0][1]),
      .avm_unnamed_pred20_pred_readdatavalid(local_avm_aspace72_readdatavalid[0][1]),
      .avm_unnamed_pred20_pred_burstcount(local_avm_aspace72_burstcount[0][1]),
      .avm_unnamed_pred20_pred_writeack(local_avm_aspace72_writeack[0][1]),
      // AVM avm_arrayidx21_i103_promoted_pre_lm101664_pred
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_enable(local_avm_aspace73_enable[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_read(local_avm_aspace73_read[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_write(local_avm_aspace73_write[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_address(local_avm_aspace73_address[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_writedata(local_avm_aspace73_writedata[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_byteenable(local_avm_aspace73_byteenable[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_waitrequest(local_avm_aspace73_waitrequest[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_readdata(local_avm_aspace73_readdata[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_readdatavalid(local_avm_aspace73_readdatavalid[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_burstcount(local_avm_aspace73_burstcount[0][0]),
      .avm_arrayidx21_i103_promoted_pre_lm101664_pred_writeack(local_avm_aspace73_writeack[0][0]),
      // AVM avm_memdep_211663_pred
      .avm_memdep_211663_pred_enable(local_avm_aspace73_enable[0][1]),
      .avm_memdep_211663_pred_read(local_avm_aspace73_read[0][1]),
      .avm_memdep_211663_pred_write(local_avm_aspace73_write[0][1]),
      .avm_memdep_211663_pred_address(local_avm_aspace73_address[0][1]),
      .avm_memdep_211663_pred_writedata(local_avm_aspace73_writedata[0][1]),
      .avm_memdep_211663_pred_byteenable(local_avm_aspace73_byteenable[0][1]),
      .avm_memdep_211663_pred_waitrequest(local_avm_aspace73_waitrequest[0][1]),
      .avm_memdep_211663_pred_readdata(local_avm_aspace73_readdata[0][1]),
      .avm_memdep_211663_pred_readdatavalid(local_avm_aspace73_readdatavalid[0][1]),
      .avm_memdep_211663_pred_burstcount(local_avm_aspace73_burstcount[0][1]),
      .avm_memdep_211663_pred_writeack(local_avm_aspace73_writeack[0][1]),
      // AVM avm_memdep_23_pred
      .avm_memdep_23_pred_enable(local_avm_aspace74_enable[0][0]),
      .avm_memdep_23_pred_read(local_avm_aspace74_read[0][0]),
      .avm_memdep_23_pred_write(local_avm_aspace74_write[0][0]),
      .avm_memdep_23_pred_address(local_avm_aspace74_address[0][0]),
      .avm_memdep_23_pred_writedata(local_avm_aspace74_writedata[0][0]),
      .avm_memdep_23_pred_byteenable(local_avm_aspace74_byteenable[0][0]),
      .avm_memdep_23_pred_waitrequest(local_avm_aspace74_waitrequest[0][0]),
      .avm_memdep_23_pred_readdata(local_avm_aspace74_readdata[0][0]),
      .avm_memdep_23_pred_readdatavalid(local_avm_aspace74_readdatavalid[0][0]),
      .avm_memdep_23_pred_burstcount(local_avm_aspace74_burstcount[0][0]),
      .avm_memdep_23_pred_writeack(local_avm_aspace74_writeack[0][0]),
      // AVM avm_unnamed_pred23_pred
      .avm_unnamed_pred23_pred_enable(local_avm_aspace74_enable[0][1]),
      .avm_unnamed_pred23_pred_read(local_avm_aspace74_read[0][1]),
      .avm_unnamed_pred23_pred_write(local_avm_aspace74_write[0][1]),
      .avm_unnamed_pred23_pred_address(local_avm_aspace74_address[0][1]),
      .avm_unnamed_pred23_pred_writedata(local_avm_aspace74_writedata[0][1]),
      .avm_unnamed_pred23_pred_byteenable(local_avm_aspace74_byteenable[0][1]),
      .avm_unnamed_pred23_pred_waitrequest(local_avm_aspace74_waitrequest[0][1]),
      .avm_unnamed_pred23_pred_readdata(local_avm_aspace74_readdata[0][1]),
      .avm_unnamed_pred23_pred_readdatavalid(local_avm_aspace74_readdatavalid[0][1]),
      .avm_unnamed_pred23_pred_burstcount(local_avm_aspace74_burstcount[0][1]),
      .avm_unnamed_pred23_pred_writeack(local_avm_aspace74_writeack[0][1]),
      // AVM avm_image_load
      .avm_image_load_enable(local_avm_aspace75_enable[0][0]),
      .avm_image_load_read(local_avm_aspace75_read[0][0]),
      .avm_image_load_write(local_avm_aspace75_write[0][0]),
      .avm_image_load_address(local_avm_aspace75_address[0][0]),
      .avm_image_load_writedata(local_avm_aspace75_writedata[0][0]),
      .avm_image_load_byteenable(local_avm_aspace75_byteenable[0][0]),
      .avm_image_load_waitrequest(local_avm_aspace75_waitrequest[0][0]),
      .avm_image_load_readdata(local_avm_aspace75_readdata[0][0]),
      .avm_image_load_readdatavalid(local_avm_aspace75_readdatavalid[0][0]),
      .avm_image_load_burstcount(local_avm_aspace75_burstcount[0][0]),
      .avm_image_load_writeack(local_avm_aspace75_writeack[0][0]),
      // AVM avm_image_store
      .avm_image_store_enable(local_avm_aspace75_enable[0][1]),
      .avm_image_store_read(local_avm_aspace75_read[0][1]),
      .avm_image_store_write(local_avm_aspace75_write[0][1]),
      .avm_image_store_address(local_avm_aspace75_address[0][1]),
      .avm_image_store_writedata(local_avm_aspace75_writedata[0][1]),
      .avm_image_store_byteenable(local_avm_aspace75_byteenable[0][1]),
      .avm_image_store_waitrequest(local_avm_aspace75_waitrequest[0][1]),
      .avm_image_store_readdata(local_avm_aspace75_readdata[0][1]),
      .avm_image_store_readdatavalid(local_avm_aspace75_readdatavalid[0][1]),
      .avm_image_store_burstcount(local_avm_aspace75_burstcount[0][1]),
      .avm_image_store_writeack(local_avm_aspace75_writeack[0][1]),
      // AVM avm_unnamed_pred9_pred
      .avm_unnamed_pred9_pred_enable(local_avm_aspace75_enable[0][2]),
      .avm_unnamed_pred9_pred_read(local_avm_aspace75_read[0][2]),
      .avm_unnamed_pred9_pred_write(local_avm_aspace75_write[0][2]),
      .avm_unnamed_pred9_pred_address(local_avm_aspace75_address[0][2]),
      .avm_unnamed_pred9_pred_writedata(local_avm_aspace75_writedata[0][2]),
      .avm_unnamed_pred9_pred_byteenable(local_avm_aspace75_byteenable[0][2]),
      .avm_unnamed_pred9_pred_waitrequest(local_avm_aspace75_waitrequest[0][2]),
      .avm_unnamed_pred9_pred_readdata(local_avm_aspace75_readdata[0][2]),
      .avm_unnamed_pred9_pred_readdatavalid(local_avm_aspace75_readdatavalid[0][2]),
      .avm_unnamed_pred9_pred_burstcount(local_avm_aspace75_burstcount[0][2]),
      .avm_unnamed_pred9_pred_writeack(local_avm_aspace75_writeack[0][2]),
      // AVM avm_unnamed_pred3_pred
      .avm_unnamed_pred3_pred_enable(local_avm_aspace76_enable[0][0]),
      .avm_unnamed_pred3_pred_read(local_avm_aspace76_read[0][0]),
      .avm_unnamed_pred3_pred_write(local_avm_aspace76_write[0][0]),
      .avm_unnamed_pred3_pred_address(local_avm_aspace76_address[0][0]),
      .avm_unnamed_pred3_pred_writedata(local_avm_aspace76_writedata[0][0]),
      .avm_unnamed_pred3_pred_byteenable(local_avm_aspace76_byteenable[0][0]),
      .avm_unnamed_pred3_pred_waitrequest(local_avm_aspace76_waitrequest[0][0]),
      .avm_unnamed_pred3_pred_readdata(local_avm_aspace76_readdata[0][0]),
      .avm_unnamed_pred3_pred_readdatavalid(local_avm_aspace76_readdatavalid[0][0]),
      .avm_unnamed_pred3_pred_burstcount(local_avm_aspace76_burstcount[0][0]),
      .avm_unnamed_pred3_pred_writeack(local_avm_aspace76_writeack[0][0]),
      // AVM avm_w_conv1_load
      .avm_w_conv1_load_enable(local_avm_aspace76_enable[0][1]),
      .avm_w_conv1_load_read(local_avm_aspace76_read[0][1]),
      .avm_w_conv1_load_write(local_avm_aspace76_write[0][1]),
      .avm_w_conv1_load_address(local_avm_aspace76_address[0][1]),
      .avm_w_conv1_load_writedata(local_avm_aspace76_writedata[0][1]),
      .avm_w_conv1_load_byteenable(local_avm_aspace76_byteenable[0][1]),
      .avm_w_conv1_load_waitrequest(local_avm_aspace76_waitrequest[0][1]),
      .avm_w_conv1_load_readdata(local_avm_aspace76_readdata[0][1]),
      .avm_w_conv1_load_readdatavalid(local_avm_aspace76_readdatavalid[0][1]),
      .avm_w_conv1_load_burstcount(local_avm_aspace76_burstcount[0][1]),
      .avm_w_conv1_load_writeack(local_avm_aspace76_writeack[0][1]),
      // AVM avm_w_conv1_store
      .avm_w_conv1_store_enable(local_avm_aspace76_enable[0][2]),
      .avm_w_conv1_store_read(local_avm_aspace76_read[0][2]),
      .avm_w_conv1_store_write(local_avm_aspace76_write[0][2]),
      .avm_w_conv1_store_address(local_avm_aspace76_address[0][2]),
      .avm_w_conv1_store_writedata(local_avm_aspace76_writedata[0][2]),
      .avm_w_conv1_store_byteenable(local_avm_aspace76_byteenable[0][2]),
      .avm_w_conv1_store_waitrequest(local_avm_aspace76_waitrequest[0][2]),
      .avm_w_conv1_store_readdata(local_avm_aspace76_readdata[0][2]),
      .avm_w_conv1_store_readdatavalid(local_avm_aspace76_readdatavalid[0][2]),
      .avm_w_conv1_store_burstcount(local_avm_aspace76_burstcount[0][2]),
      .avm_w_conv1_store_writeack(local_avm_aspace76_writeack[0][2]),
      // AVM avm_b_conv1_load
      .avm_b_conv1_load_enable(local_avm_aspace77_enable[0][0]),
      .avm_b_conv1_load_read(local_avm_aspace77_read[0][0]),
      .avm_b_conv1_load_write(local_avm_aspace77_write[0][0]),
      .avm_b_conv1_load_address(local_avm_aspace77_address[0][0]),
      .avm_b_conv1_load_writedata(local_avm_aspace77_writedata[0][0]),
      .avm_b_conv1_load_byteenable(local_avm_aspace77_byteenable[0][0]),
      .avm_b_conv1_load_waitrequest(local_avm_aspace77_waitrequest[0][0]),
      .avm_b_conv1_load_readdata(local_avm_aspace77_readdata[0][0]),
      .avm_b_conv1_load_readdatavalid(local_avm_aspace77_readdatavalid[0][0]),
      .avm_b_conv1_load_burstcount(local_avm_aspace77_burstcount[0][0]),
      .avm_b_conv1_load_writeack(local_avm_aspace77_writeack[0][0]),
      // AVM avm_b_conv1_store
      .avm_b_conv1_store_enable(local_avm_aspace77_enable[0][1]),
      .avm_b_conv1_store_read(local_avm_aspace77_read[0][1]),
      .avm_b_conv1_store_write(local_avm_aspace77_write[0][1]),
      .avm_b_conv1_store_address(local_avm_aspace77_address[0][1]),
      .avm_b_conv1_store_writedata(local_avm_aspace77_writedata[0][1]),
      .avm_b_conv1_store_byteenable(local_avm_aspace77_byteenable[0][1]),
      .avm_b_conv1_store_waitrequest(local_avm_aspace77_waitrequest[0][1]),
      .avm_b_conv1_store_readdata(local_avm_aspace77_readdata[0][1]),
      .avm_b_conv1_store_readdatavalid(local_avm_aspace77_readdatavalid[0][1]),
      .avm_b_conv1_store_burstcount(local_avm_aspace77_burstcount[0][1]),
      .avm_b_conv1_store_writeack(local_avm_aspace77_writeack[0][1]),
      // AVM avm_unnamed_pred4_pred
      .avm_unnamed_pred4_pred_enable(local_avm_aspace77_enable[0][2]),
      .avm_unnamed_pred4_pred_read(local_avm_aspace77_read[0][2]),
      .avm_unnamed_pred4_pred_write(local_avm_aspace77_write[0][2]),
      .avm_unnamed_pred4_pred_address(local_avm_aspace77_address[0][2]),
      .avm_unnamed_pred4_pred_writedata(local_avm_aspace77_writedata[0][2]),
      .avm_unnamed_pred4_pred_byteenable(local_avm_aspace77_byteenable[0][2]),
      .avm_unnamed_pred4_pred_waitrequest(local_avm_aspace77_waitrequest[0][2]),
      .avm_unnamed_pred4_pred_readdata(local_avm_aspace77_readdata[0][2]),
      .avm_unnamed_pred4_pred_readdatavalid(local_avm_aspace77_readdatavalid[0][2]),
      .avm_unnamed_pred4_pred_burstcount(local_avm_aspace77_burstcount[0][2]),
      .avm_unnamed_pred4_pred_writeack(local_avm_aspace77_writeack[0][2]),
      // AVM avm_unnamed_pred13_pred
      .avm_unnamed_pred13_pred_enable(local_avm_aspace78_enable[0][0]),
      .avm_unnamed_pred13_pred_read(local_avm_aspace78_read[0][0]),
      .avm_unnamed_pred13_pred_write(local_avm_aspace78_write[0][0]),
      .avm_unnamed_pred13_pred_address(local_avm_aspace78_address[0][0]),
      .avm_unnamed_pred13_pred_writedata(local_avm_aspace78_writedata[0][0]),
      .avm_unnamed_pred13_pred_byteenable(local_avm_aspace78_byteenable[0][0]),
      .avm_unnamed_pred13_pred_waitrequest(local_avm_aspace78_waitrequest[0][0]),
      .avm_unnamed_pred13_pred_readdata(local_avm_aspace78_readdata[0][0]),
      .avm_unnamed_pred13_pred_readdatavalid(local_avm_aspace78_readdatavalid[0][0]),
      .avm_unnamed_pred13_pred_burstcount(local_avm_aspace78_burstcount[0][0]),
      .avm_unnamed_pred13_pred_writeack(local_avm_aspace78_writeack[0][0]),
      // AVM avm_w_conv2_load
      .avm_w_conv2_load_enable(local_avm_aspace78_enable[0][1]),
      .avm_w_conv2_load_read(local_avm_aspace78_read[0][1]),
      .avm_w_conv2_load_write(local_avm_aspace78_write[0][1]),
      .avm_w_conv2_load_address(local_avm_aspace78_address[0][1]),
      .avm_w_conv2_load_writedata(local_avm_aspace78_writedata[0][1]),
      .avm_w_conv2_load_byteenable(local_avm_aspace78_byteenable[0][1]),
      .avm_w_conv2_load_waitrequest(local_avm_aspace78_waitrequest[0][1]),
      .avm_w_conv2_load_readdata(local_avm_aspace78_readdata[0][1]),
      .avm_w_conv2_load_readdatavalid(local_avm_aspace78_readdatavalid[0][1]),
      .avm_w_conv2_load_burstcount(local_avm_aspace78_burstcount[0][1]),
      .avm_w_conv2_load_writeack(local_avm_aspace78_writeack[0][1]),
      // AVM avm_w_conv2_store
      .avm_w_conv2_store_enable(local_avm_aspace78_enable[0][2]),
      .avm_w_conv2_store_read(local_avm_aspace78_read[0][2]),
      .avm_w_conv2_store_write(local_avm_aspace78_write[0][2]),
      .avm_w_conv2_store_address(local_avm_aspace78_address[0][2]),
      .avm_w_conv2_store_writedata(local_avm_aspace78_writedata[0][2]),
      .avm_w_conv2_store_byteenable(local_avm_aspace78_byteenable[0][2]),
      .avm_w_conv2_store_waitrequest(local_avm_aspace78_waitrequest[0][2]),
      .avm_w_conv2_store_readdata(local_avm_aspace78_readdata[0][2]),
      .avm_w_conv2_store_readdatavalid(local_avm_aspace78_readdatavalid[0][2]),
      .avm_w_conv2_store_burstcount(local_avm_aspace78_burstcount[0][2]),
      .avm_w_conv2_store_writeack(local_avm_aspace78_writeack[0][2]),
      // AVM avm_b_conv2_load
      .avm_b_conv2_load_enable(local_avm_aspace79_enable[0][0]),
      .avm_b_conv2_load_read(local_avm_aspace79_read[0][0]),
      .avm_b_conv2_load_write(local_avm_aspace79_write[0][0]),
      .avm_b_conv2_load_address(local_avm_aspace79_address[0][0]),
      .avm_b_conv2_load_writedata(local_avm_aspace79_writedata[0][0]),
      .avm_b_conv2_load_byteenable(local_avm_aspace79_byteenable[0][0]),
      .avm_b_conv2_load_waitrequest(local_avm_aspace79_waitrequest[0][0]),
      .avm_b_conv2_load_readdata(local_avm_aspace79_readdata[0][0]),
      .avm_b_conv2_load_readdatavalid(local_avm_aspace79_readdatavalid[0][0]),
      .avm_b_conv2_load_burstcount(local_avm_aspace79_burstcount[0][0]),
      .avm_b_conv2_load_writeack(local_avm_aspace79_writeack[0][0]),
      // AVM avm_b_conv2_store
      .avm_b_conv2_store_enable(local_avm_aspace79_enable[0][1]),
      .avm_b_conv2_store_read(local_avm_aspace79_read[0][1]),
      .avm_b_conv2_store_write(local_avm_aspace79_write[0][1]),
      .avm_b_conv2_store_address(local_avm_aspace79_address[0][1]),
      .avm_b_conv2_store_writedata(local_avm_aspace79_writedata[0][1]),
      .avm_b_conv2_store_byteenable(local_avm_aspace79_byteenable[0][1]),
      .avm_b_conv2_store_waitrequest(local_avm_aspace79_waitrequest[0][1]),
      .avm_b_conv2_store_readdata(local_avm_aspace79_readdata[0][1]),
      .avm_b_conv2_store_readdatavalid(local_avm_aspace79_readdatavalid[0][1]),
      .avm_b_conv2_store_burstcount(local_avm_aspace79_burstcount[0][1]),
      .avm_b_conv2_store_writeack(local_avm_aspace79_writeack[0][1]),
      // AVM avm_lm11_pred
      .avm_lm11_pred_enable(local_avm_aspace79_enable[0][2]),
      .avm_lm11_pred_read(local_avm_aspace79_read[0][2]),
      .avm_lm11_pred_write(local_avm_aspace79_write[0][2]),
      .avm_lm11_pred_address(local_avm_aspace79_address[0][2]),
      .avm_lm11_pred_writedata(local_avm_aspace79_writedata[0][2]),
      .avm_lm11_pred_byteenable(local_avm_aspace79_byteenable[0][2]),
      .avm_lm11_pred_waitrequest(local_avm_aspace79_waitrequest[0][2]),
      .avm_lm11_pred_readdata(local_avm_aspace79_readdata[0][2]),
      .avm_lm11_pred_readdatavalid(local_avm_aspace79_readdatavalid[0][2]),
      .avm_lm11_pred_burstcount(local_avm_aspace79_burstcount[0][2]),
      .avm_lm11_pred_writeack(local_avm_aspace79_writeack[0][2]),
      // AVM avm_unnamed_pred16_pred
      .avm_unnamed_pred16_pred_enable(local_avm_aspace80_enable[0][0]),
      .avm_unnamed_pred16_pred_read(local_avm_aspace80_read[0][0]),
      .avm_unnamed_pred16_pred_write(local_avm_aspace80_write[0][0]),
      .avm_unnamed_pred16_pred_address(local_avm_aspace80_address[0][0]),
      .avm_unnamed_pred16_pred_writedata(local_avm_aspace80_writedata[0][0]),
      .avm_unnamed_pred16_pred_byteenable(local_avm_aspace80_byteenable[0][0]),
      .avm_unnamed_pred16_pred_waitrequest(local_avm_aspace80_waitrequest[0][0]),
      .avm_unnamed_pred16_pred_readdata(local_avm_aspace80_readdata[0][0]),
      .avm_unnamed_pred16_pred_readdatavalid(local_avm_aspace80_readdatavalid[0][0]),
      .avm_unnamed_pred16_pred_burstcount(local_avm_aspace80_burstcount[0][0]),
      .avm_unnamed_pred16_pred_writeack(local_avm_aspace80_writeack[0][0]),
      // AVM avm_w_fc1_load
      .avm_w_fc1_load_enable(local_avm_aspace80_enable[0][1]),
      .avm_w_fc1_load_read(local_avm_aspace80_read[0][1]),
      .avm_w_fc1_load_write(local_avm_aspace80_write[0][1]),
      .avm_w_fc1_load_address(local_avm_aspace80_address[0][1]),
      .avm_w_fc1_load_writedata(local_avm_aspace80_writedata[0][1]),
      .avm_w_fc1_load_byteenable(local_avm_aspace80_byteenable[0][1]),
      .avm_w_fc1_load_waitrequest(local_avm_aspace80_waitrequest[0][1]),
      .avm_w_fc1_load_readdata(local_avm_aspace80_readdata[0][1]),
      .avm_w_fc1_load_readdatavalid(local_avm_aspace80_readdatavalid[0][1]),
      .avm_w_fc1_load_burstcount(local_avm_aspace80_burstcount[0][1]),
      .avm_w_fc1_load_writeack(local_avm_aspace80_writeack[0][1]),
      // AVM avm_w_fc1_store
      .avm_w_fc1_store_enable(local_avm_aspace80_enable[0][2]),
      .avm_w_fc1_store_read(local_avm_aspace80_read[0][2]),
      .avm_w_fc1_store_write(local_avm_aspace80_write[0][2]),
      .avm_w_fc1_store_address(local_avm_aspace80_address[0][2]),
      .avm_w_fc1_store_writedata(local_avm_aspace80_writedata[0][2]),
      .avm_w_fc1_store_byteenable(local_avm_aspace80_byteenable[0][2]),
      .avm_w_fc1_store_waitrequest(local_avm_aspace80_waitrequest[0][2]),
      .avm_w_fc1_store_readdata(local_avm_aspace80_readdata[0][2]),
      .avm_w_fc1_store_readdatavalid(local_avm_aspace80_readdatavalid[0][2]),
      .avm_w_fc1_store_burstcount(local_avm_aspace80_burstcount[0][2]),
      .avm_w_fc1_store_writeack(local_avm_aspace80_writeack[0][2]),
      // AVM avm_b_fc1_load
      .avm_b_fc1_load_enable(local_avm_aspace81_enable[0][0]),
      .avm_b_fc1_load_read(local_avm_aspace81_read[0][0]),
      .avm_b_fc1_load_write(local_avm_aspace81_write[0][0]),
      .avm_b_fc1_load_address(local_avm_aspace81_address[0][0]),
      .avm_b_fc1_load_writedata(local_avm_aspace81_writedata[0][0]),
      .avm_b_fc1_load_byteenable(local_avm_aspace81_byteenable[0][0]),
      .avm_b_fc1_load_waitrequest(local_avm_aspace81_waitrequest[0][0]),
      .avm_b_fc1_load_readdata(local_avm_aspace81_readdata[0][0]),
      .avm_b_fc1_load_readdatavalid(local_avm_aspace81_readdatavalid[0][0]),
      .avm_b_fc1_load_burstcount(local_avm_aspace81_burstcount[0][0]),
      .avm_b_fc1_load_writeack(local_avm_aspace81_writeack[0][0]),
      // AVM avm_b_fc1_store
      .avm_b_fc1_store_enable(local_avm_aspace81_enable[0][1]),
      .avm_b_fc1_store_read(local_avm_aspace81_read[0][1]),
      .avm_b_fc1_store_write(local_avm_aspace81_write[0][1]),
      .avm_b_fc1_store_address(local_avm_aspace81_address[0][1]),
      .avm_b_fc1_store_writedata(local_avm_aspace81_writedata[0][1]),
      .avm_b_fc1_store_byteenable(local_avm_aspace81_byteenable[0][1]),
      .avm_b_fc1_store_waitrequest(local_avm_aspace81_waitrequest[0][1]),
      .avm_b_fc1_store_readdata(local_avm_aspace81_readdata[0][1]),
      .avm_b_fc1_store_readdatavalid(local_avm_aspace81_readdatavalid[0][1]),
      .avm_b_fc1_store_burstcount(local_avm_aspace81_burstcount[0][1]),
      .avm_b_fc1_store_writeack(local_avm_aspace81_writeack[0][1]),
      // AVM avm_lm3112_pred
      .avm_lm3112_pred_enable(local_avm_aspace81_enable[0][2]),
      .avm_lm3112_pred_read(local_avm_aspace81_read[0][2]),
      .avm_lm3112_pred_write(local_avm_aspace81_write[0][2]),
      .avm_lm3112_pred_address(local_avm_aspace81_address[0][2]),
      .avm_lm3112_pred_writedata(local_avm_aspace81_writedata[0][2]),
      .avm_lm3112_pred_byteenable(local_avm_aspace81_byteenable[0][2]),
      .avm_lm3112_pred_waitrequest(local_avm_aspace81_waitrequest[0][2]),
      .avm_lm3112_pred_readdata(local_avm_aspace81_readdata[0][2]),
      .avm_lm3112_pred_readdatavalid(local_avm_aspace81_readdatavalid[0][2]),
      .avm_lm3112_pred_burstcount(local_avm_aspace81_burstcount[0][2]),
      .avm_lm3112_pred_writeack(local_avm_aspace81_writeack[0][2]),
      // AVM avm_unnamed_pred19_pred
      .avm_unnamed_pred19_pred_enable(local_avm_aspace82_enable[0][0]),
      .avm_unnamed_pred19_pred_read(local_avm_aspace82_read[0][0]),
      .avm_unnamed_pred19_pred_write(local_avm_aspace82_write[0][0]),
      .avm_unnamed_pred19_pred_address(local_avm_aspace82_address[0][0]),
      .avm_unnamed_pred19_pred_writedata(local_avm_aspace82_writedata[0][0]),
      .avm_unnamed_pred19_pred_byteenable(local_avm_aspace82_byteenable[0][0]),
      .avm_unnamed_pred19_pred_waitrequest(local_avm_aspace82_waitrequest[0][0]),
      .avm_unnamed_pred19_pred_readdata(local_avm_aspace82_readdata[0][0]),
      .avm_unnamed_pred19_pred_readdatavalid(local_avm_aspace82_readdatavalid[0][0]),
      .avm_unnamed_pred19_pred_burstcount(local_avm_aspace82_burstcount[0][0]),
      .avm_unnamed_pred19_pred_writeack(local_avm_aspace82_writeack[0][0]),
      // AVM avm_w_fc2_load
      .avm_w_fc2_load_enable(local_avm_aspace82_enable[0][1]),
      .avm_w_fc2_load_read(local_avm_aspace82_read[0][1]),
      .avm_w_fc2_load_write(local_avm_aspace82_write[0][1]),
      .avm_w_fc2_load_address(local_avm_aspace82_address[0][1]),
      .avm_w_fc2_load_writedata(local_avm_aspace82_writedata[0][1]),
      .avm_w_fc2_load_byteenable(local_avm_aspace82_byteenable[0][1]),
      .avm_w_fc2_load_waitrequest(local_avm_aspace82_waitrequest[0][1]),
      .avm_w_fc2_load_readdata(local_avm_aspace82_readdata[0][1]),
      .avm_w_fc2_load_readdatavalid(local_avm_aspace82_readdatavalid[0][1]),
      .avm_w_fc2_load_burstcount(local_avm_aspace82_burstcount[0][1]),
      .avm_w_fc2_load_writeack(local_avm_aspace82_writeack[0][1]),
      // AVM avm_w_fc2_store
      .avm_w_fc2_store_enable(local_avm_aspace82_enable[0][2]),
      .avm_w_fc2_store_read(local_avm_aspace82_read[0][2]),
      .avm_w_fc2_store_write(local_avm_aspace82_write[0][2]),
      .avm_w_fc2_store_address(local_avm_aspace82_address[0][2]),
      .avm_w_fc2_store_writedata(local_avm_aspace82_writedata[0][2]),
      .avm_w_fc2_store_byteenable(local_avm_aspace82_byteenable[0][2]),
      .avm_w_fc2_store_waitrequest(local_avm_aspace82_waitrequest[0][2]),
      .avm_w_fc2_store_readdata(local_avm_aspace82_readdata[0][2]),
      .avm_w_fc2_store_readdatavalid(local_avm_aspace82_readdatavalid[0][2]),
      .avm_w_fc2_store_burstcount(local_avm_aspace82_burstcount[0][2]),
      .avm_w_fc2_store_writeack(local_avm_aspace82_writeack[0][2]),
      // AVM avm_b_fc2_load
      .avm_b_fc2_load_enable(local_avm_aspace83_enable[0][0]),
      .avm_b_fc2_load_read(local_avm_aspace83_read[0][0]),
      .avm_b_fc2_load_write(local_avm_aspace83_write[0][0]),
      .avm_b_fc2_load_address(local_avm_aspace83_address[0][0]),
      .avm_b_fc2_load_writedata(local_avm_aspace83_writedata[0][0]),
      .avm_b_fc2_load_byteenable(local_avm_aspace83_byteenable[0][0]),
      .avm_b_fc2_load_waitrequest(local_avm_aspace83_waitrequest[0][0]),
      .avm_b_fc2_load_readdata(local_avm_aspace83_readdata[0][0]),
      .avm_b_fc2_load_readdatavalid(local_avm_aspace83_readdatavalid[0][0]),
      .avm_b_fc2_load_burstcount(local_avm_aspace83_burstcount[0][0]),
      .avm_b_fc2_load_writeack(local_avm_aspace83_writeack[0][0]),
      // AVM avm_b_fc2_store
      .avm_b_fc2_store_enable(local_avm_aspace83_enable[0][1]),
      .avm_b_fc2_store_read(local_avm_aspace83_read[0][1]),
      .avm_b_fc2_store_write(local_avm_aspace83_write[0][1]),
      .avm_b_fc2_store_address(local_avm_aspace83_address[0][1]),
      .avm_b_fc2_store_writedata(local_avm_aspace83_writedata[0][1]),
      .avm_b_fc2_store_byteenable(local_avm_aspace83_byteenable[0][1]),
      .avm_b_fc2_store_waitrequest(local_avm_aspace83_waitrequest[0][1]),
      .avm_b_fc2_store_readdata(local_avm_aspace83_readdata[0][1]),
      .avm_b_fc2_store_readdatavalid(local_avm_aspace83_readdatavalid[0][1]),
      .avm_b_fc2_store_burstcount(local_avm_aspace83_burstcount[0][1]),
      .avm_b_fc2_store_writeack(local_avm_aspace83_writeack[0][1]),
      // AVM avm_lm3413_pred
      .avm_lm3413_pred_enable(local_avm_aspace83_enable[0][2]),
      .avm_lm3413_pred_read(local_avm_aspace83_read[0][2]),
      .avm_lm3413_pred_write(local_avm_aspace83_write[0][2]),
      .avm_lm3413_pred_address(local_avm_aspace83_address[0][2]),
      .avm_lm3413_pred_writedata(local_avm_aspace83_writedata[0][2]),
      .avm_lm3413_pred_byteenable(local_avm_aspace83_byteenable[0][2]),
      .avm_lm3413_pred_waitrequest(local_avm_aspace83_waitrequest[0][2]),
      .avm_lm3413_pred_readdata(local_avm_aspace83_readdata[0][2]),
      .avm_lm3413_pred_readdatavalid(local_avm_aspace83_readdatavalid[0][2]),
      .avm_lm3413_pred_burstcount(local_avm_aspace83_burstcount[0][2]),
      .avm_lm3413_pred_writeack(local_avm_aspace83_writeack[0][2]),
      // AVM avm_unnamed_pred22_pred
      .avm_unnamed_pred22_pred_enable(local_avm_aspace84_enable[0][0]),
      .avm_unnamed_pred22_pred_read(local_avm_aspace84_read[0][0]),
      .avm_unnamed_pred22_pred_write(local_avm_aspace84_write[0][0]),
      .avm_unnamed_pred22_pred_address(local_avm_aspace84_address[0][0]),
      .avm_unnamed_pred22_pred_writedata(local_avm_aspace84_writedata[0][0]),
      .avm_unnamed_pred22_pred_byteenable(local_avm_aspace84_byteenable[0][0]),
      .avm_unnamed_pred22_pred_waitrequest(local_avm_aspace84_waitrequest[0][0]),
      .avm_unnamed_pred22_pred_readdata(local_avm_aspace84_readdata[0][0]),
      .avm_unnamed_pred22_pred_readdatavalid(local_avm_aspace84_readdatavalid[0][0]),
      .avm_unnamed_pred22_pred_burstcount(local_avm_aspace84_burstcount[0][0]),
      .avm_unnamed_pred22_pred_writeack(local_avm_aspace84_writeack[0][0]),
      // AVM avm_w_fc3_load
      .avm_w_fc3_load_enable(local_avm_aspace84_enable[0][1]),
      .avm_w_fc3_load_read(local_avm_aspace84_read[0][1]),
      .avm_w_fc3_load_write(local_avm_aspace84_write[0][1]),
      .avm_w_fc3_load_address(local_avm_aspace84_address[0][1]),
      .avm_w_fc3_load_writedata(local_avm_aspace84_writedata[0][1]),
      .avm_w_fc3_load_byteenable(local_avm_aspace84_byteenable[0][1]),
      .avm_w_fc3_load_waitrequest(local_avm_aspace84_waitrequest[0][1]),
      .avm_w_fc3_load_readdata(local_avm_aspace84_readdata[0][1]),
      .avm_w_fc3_load_readdatavalid(local_avm_aspace84_readdatavalid[0][1]),
      .avm_w_fc3_load_burstcount(local_avm_aspace84_burstcount[0][1]),
      .avm_w_fc3_load_writeack(local_avm_aspace84_writeack[0][1]),
      // AVM avm_w_fc3_store
      .avm_w_fc3_store_enable(local_avm_aspace84_enable[0][2]),
      .avm_w_fc3_store_read(local_avm_aspace84_read[0][2]),
      .avm_w_fc3_store_write(local_avm_aspace84_write[0][2]),
      .avm_w_fc3_store_address(local_avm_aspace84_address[0][2]),
      .avm_w_fc3_store_writedata(local_avm_aspace84_writedata[0][2]),
      .avm_w_fc3_store_byteenable(local_avm_aspace84_byteenable[0][2]),
      .avm_w_fc3_store_waitrequest(local_avm_aspace84_waitrequest[0][2]),
      .avm_w_fc3_store_readdata(local_avm_aspace84_readdata[0][2]),
      .avm_w_fc3_store_readdatavalid(local_avm_aspace84_readdatavalid[0][2]),
      .avm_w_fc3_store_burstcount(local_avm_aspace84_burstcount[0][2]),
      .avm_w_fc3_store_writeack(local_avm_aspace84_writeack[0][2]),
      // AVM avm_b_fc3_load
      .avm_b_fc3_load_enable(local_avm_aspace85_enable[0][0]),
      .avm_b_fc3_load_read(local_avm_aspace85_read[0][0]),
      .avm_b_fc3_load_write(local_avm_aspace85_write[0][0]),
      .avm_b_fc3_load_address(local_avm_aspace85_address[0][0]),
      .avm_b_fc3_load_writedata(local_avm_aspace85_writedata[0][0]),
      .avm_b_fc3_load_byteenable(local_avm_aspace85_byteenable[0][0]),
      .avm_b_fc3_load_waitrequest(local_avm_aspace85_waitrequest[0][0]),
      .avm_b_fc3_load_readdata(local_avm_aspace85_readdata[0][0]),
      .avm_b_fc3_load_readdatavalid(local_avm_aspace85_readdatavalid[0][0]),
      .avm_b_fc3_load_burstcount(local_avm_aspace85_burstcount[0][0]),
      .avm_b_fc3_load_writeack(local_avm_aspace85_writeack[0][0]),
      // AVM avm_b_fc3_store
      .avm_b_fc3_store_enable(local_avm_aspace85_enable[0][1]),
      .avm_b_fc3_store_read(local_avm_aspace85_read[0][1]),
      .avm_b_fc3_store_write(local_avm_aspace85_write[0][1]),
      .avm_b_fc3_store_address(local_avm_aspace85_address[0][1]),
      .avm_b_fc3_store_writedata(local_avm_aspace85_writedata[0][1]),
      .avm_b_fc3_store_byteenable(local_avm_aspace85_byteenable[0][1]),
      .avm_b_fc3_store_waitrequest(local_avm_aspace85_waitrequest[0][1]),
      .avm_b_fc3_store_readdata(local_avm_aspace85_readdata[0][1]),
      .avm_b_fc3_store_readdatavalid(local_avm_aspace85_readdatavalid[0][1]),
      .avm_b_fc3_store_burstcount(local_avm_aspace85_burstcount[0][1]),
      .avm_b_fc3_store_writeack(local_avm_aspace85_writeack[0][1]),
      // AVM avm_lm3714_pred
      .avm_lm3714_pred_enable(local_avm_aspace85_enable[0][2]),
      .avm_lm3714_pred_read(local_avm_aspace85_read[0][2]),
      .avm_lm3714_pred_write(local_avm_aspace85_write[0][2]),
      .avm_lm3714_pred_address(local_avm_aspace85_address[0][2]),
      .avm_lm3714_pred_writedata(local_avm_aspace85_writedata[0][2]),
      .avm_lm3714_pred_byteenable(local_avm_aspace85_byteenable[0][2]),
      .avm_lm3714_pred_waitrequest(local_avm_aspace85_waitrequest[0][2]),
      .avm_lm3714_pred_readdata(local_avm_aspace85_readdata[0][2]),
      .avm_lm3714_pred_readdatavalid(local_avm_aspace85_readdatavalid[0][2]),
      .avm_lm3714_pred_burstcount(local_avm_aspace85_burstcount[0][2]),
      .avm_lm3714_pred_writeack(local_avm_aspace85_writeack[0][2]),
      // AVM avm_probs_load
      .avm_probs_load_enable(local_avm_aspace86_enable[0][0]),
      .avm_probs_load_read(local_avm_aspace86_read[0][0]),
      .avm_probs_load_write(local_avm_aspace86_write[0][0]),
      .avm_probs_load_address(local_avm_aspace86_address[0][0]),
      .avm_probs_load_writedata(local_avm_aspace86_writedata[0][0]),
      .avm_probs_load_byteenable(local_avm_aspace86_byteenable[0][0]),
      .avm_probs_load_waitrequest(local_avm_aspace86_waitrequest[0][0]),
      .avm_probs_load_readdata(local_avm_aspace86_readdata[0][0]),
      .avm_probs_load_readdatavalid(local_avm_aspace86_readdatavalid[0][0]),
      .avm_probs_load_burstcount(local_avm_aspace86_burstcount[0][0]),
      .avm_probs_load_writeack(local_avm_aspace86_writeack[0][0]),
      // AVM avm_probs_store
      .avm_probs_store_enable(local_avm_aspace86_enable[0][1]),
      .avm_probs_store_read(local_avm_aspace86_read[0][1]),
      .avm_probs_store_write(local_avm_aspace86_write[0][1]),
      .avm_probs_store_address(local_avm_aspace86_address[0][1]),
      .avm_probs_store_writedata(local_avm_aspace86_writedata[0][1]),
      .avm_probs_store_byteenable(local_avm_aspace86_byteenable[0][1]),
      .avm_probs_store_waitrequest(local_avm_aspace86_waitrequest[0][1]),
      .avm_probs_store_readdata(local_avm_aspace86_readdata[0][1]),
      .avm_probs_store_readdatavalid(local_avm_aspace86_readdatavalid[0][1]),
      .avm_probs_store_burstcount(local_avm_aspace86_burstcount[0][1]),
      .avm_probs_store_writeack(local_avm_aspace86_writeack[0][1]),
      // AVM avm_unnamed_pred39_pred
      .avm_unnamed_pred39_pred_enable(local_avm_aspace86_enable[0][2]),
      .avm_unnamed_pred39_pred_read(local_avm_aspace86_read[0][2]),
      .avm_unnamed_pred39_pred_write(local_avm_aspace86_write[0][2]),
      .avm_unnamed_pred39_pred_address(local_avm_aspace86_address[0][2]),
      .avm_unnamed_pred39_pred_writedata(local_avm_aspace86_writedata[0][2]),
      .avm_unnamed_pred39_pred_byteenable(local_avm_aspace86_byteenable[0][2]),
      .avm_unnamed_pred39_pred_waitrequest(local_avm_aspace86_waitrequest[0][2]),
      .avm_unnamed_pred39_pred_readdata(local_avm_aspace86_readdata[0][2]),
      .avm_unnamed_pred39_pred_readdatavalid(local_avm_aspace86_readdatavalid[0][2]),
      .avm_unnamed_pred39_pred_burstcount(local_avm_aspace86_burstcount[0][2]),
      .avm_unnamed_pred39_pred_writeack(local_avm_aspace86_writeack[0][2]),
      // AVS avs_b_conv1
      .avs_b_conv1_enable(avs_b_conv1_enable),
      .avs_b_conv1_read(avs_b_conv1_read),
      .avs_b_conv1_write(avs_b_conv1_write),
      .avs_b_conv1_address(avs_b_conv1_address),
      .avs_b_conv1_writedata(avs_b_conv1_writedata),
      .avs_b_conv1_byteenable(avs_b_conv1_byteenable),
      .avs_b_conv1_readdata(avs_b_conv1_readdata),
      .avs_b_conv1_readdatavalid(avs_b_conv1_readdatavalid),
      // AVS avs_b_conv2
      .avs_b_conv2_enable(avs_b_conv2_enable),
      .avs_b_conv2_read(avs_b_conv2_read),
      .avs_b_conv2_write(avs_b_conv2_write),
      .avs_b_conv2_address(avs_b_conv2_address),
      .avs_b_conv2_writedata(avs_b_conv2_writedata),
      .avs_b_conv2_byteenable(avs_b_conv2_byteenable),
      .avs_b_conv2_readdata(avs_b_conv2_readdata),
      .avs_b_conv2_readdatavalid(avs_b_conv2_readdatavalid),
      // AVS avs_b_fc1
      .avs_b_fc1_enable(avs_b_fc1_enable),
      .avs_b_fc1_read(avs_b_fc1_read),
      .avs_b_fc1_write(avs_b_fc1_write),
      .avs_b_fc1_address(avs_b_fc1_address),
      .avs_b_fc1_writedata(avs_b_fc1_writedata),
      .avs_b_fc1_byteenable(avs_b_fc1_byteenable),
      .avs_b_fc1_readdata(avs_b_fc1_readdata),
      .avs_b_fc1_readdatavalid(avs_b_fc1_readdatavalid),
      // AVS avs_b_fc2
      .avs_b_fc2_enable(avs_b_fc2_enable),
      .avs_b_fc2_read(avs_b_fc2_read),
      .avs_b_fc2_write(avs_b_fc2_write),
      .avs_b_fc2_address(avs_b_fc2_address),
      .avs_b_fc2_writedata(avs_b_fc2_writedata),
      .avs_b_fc2_byteenable(avs_b_fc2_byteenable),
      .avs_b_fc2_readdata(avs_b_fc2_readdata),
      .avs_b_fc2_readdatavalid(avs_b_fc2_readdatavalid),
      // AVS avs_b_fc3
      .avs_b_fc3_enable(avs_b_fc3_enable),
      .avs_b_fc3_read(avs_b_fc3_read),
      .avs_b_fc3_write(avs_b_fc3_write),
      .avs_b_fc3_address(avs_b_fc3_address),
      .avs_b_fc3_writedata(avs_b_fc3_writedata),
      .avs_b_fc3_byteenable(avs_b_fc3_byteenable),
      .avs_b_fc3_readdata(avs_b_fc3_readdata),
      .avs_b_fc3_readdatavalid(avs_b_fc3_readdatavalid),
      // AVS avs_image
      .avs_image_enable(avs_image_enable),
      .avs_image_read(avs_image_read),
      .avs_image_write(avs_image_write),
      .avs_image_address(avs_image_address),
      .avs_image_writedata(avs_image_writedata),
      .avs_image_byteenable(avs_image_byteenable),
      .avs_image_readdata(avs_image_readdata),
      .avs_image_readdatavalid(avs_image_readdatavalid),
      // AVS avs_probs
      .avs_probs_enable(avs_probs_enable),
      .avs_probs_read(avs_probs_read),
      .avs_probs_write(avs_probs_write),
      .avs_probs_address(avs_probs_address),
      .avs_probs_writedata(avs_probs_writedata),
      .avs_probs_byteenable(avs_probs_byteenable),
      .avs_probs_readdata(avs_probs_readdata),
      .avs_probs_readdatavalid(avs_probs_readdatavalid),
      // AVS avs_w_conv1
      .avs_w_conv1_enable(avs_w_conv1_enable),
      .avs_w_conv1_read(avs_w_conv1_read),
      .avs_w_conv1_write(avs_w_conv1_write),
      .avs_w_conv1_address(avs_w_conv1_address),
      .avs_w_conv1_writedata(avs_w_conv1_writedata),
      .avs_w_conv1_byteenable(avs_w_conv1_byteenable),
      .avs_w_conv1_readdata(avs_w_conv1_readdata),
      .avs_w_conv1_readdatavalid(avs_w_conv1_readdatavalid),
      // AVS avs_w_conv2
      .avs_w_conv2_enable(avs_w_conv2_enable),
      .avs_w_conv2_read(avs_w_conv2_read),
      .avs_w_conv2_write(avs_w_conv2_write),
      .avs_w_conv2_address(avs_w_conv2_address),
      .avs_w_conv2_writedata(avs_w_conv2_writedata),
      .avs_w_conv2_byteenable(avs_w_conv2_byteenable),
      .avs_w_conv2_readdata(avs_w_conv2_readdata),
      .avs_w_conv2_readdatavalid(avs_w_conv2_readdatavalid),
      // AVS avs_w_fc1
      .avs_w_fc1_enable(avs_w_fc1_enable),
      .avs_w_fc1_read(avs_w_fc1_read),
      .avs_w_fc1_write(avs_w_fc1_write),
      .avs_w_fc1_address(avs_w_fc1_address),
      .avs_w_fc1_writedata(avs_w_fc1_writedata),
      .avs_w_fc1_byteenable(avs_w_fc1_byteenable),
      .avs_w_fc1_readdata(avs_w_fc1_readdata),
      .avs_w_fc1_readdatavalid(avs_w_fc1_readdatavalid),
      // AVS avs_w_fc2
      .avs_w_fc2_enable(avs_w_fc2_enable),
      .avs_w_fc2_read(avs_w_fc2_read),
      .avs_w_fc2_write(avs_w_fc2_write),
      .avs_w_fc2_address(avs_w_fc2_address),
      .avs_w_fc2_writedata(avs_w_fc2_writedata),
      .avs_w_fc2_byteenable(avs_w_fc2_byteenable),
      .avs_w_fc2_readdata(avs_w_fc2_readdata),
      .avs_w_fc2_readdatavalid(avs_w_fc2_readdatavalid),
      // AVS avs_w_fc3
      .avs_w_fc3_enable(avs_w_fc3_enable),
      .avs_w_fc3_read(avs_w_fc3_read),
      .avs_w_fc3_write(avs_w_fc3_write),
      .avs_w_fc3_address(avs_w_fc3_address),
      .avs_w_fc3_writedata(avs_w_fc3_writedata),
      .avs_w_fc3_byteenable(avs_w_fc3_byteenable),
      .avs_w_fc3_readdata(avs_w_fc3_readdata),
      .avs_w_fc3_readdatavalid(avs_w_fc3_readdatavalid)
   );

   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][1];
      logic local_icm_arb_enable [1][1];
      logic local_icm_arb_read [1][1];
      logic local_icm_arb_write [1][1];
      logic local_icm_arb_burstcount [1][1];
      logic [12:0] local_icm_arb_address [1][1];
      logic [31:0] local_icm_arb_writedata [1][1];
      logic [3:0] local_icm_arb_byteenable [1][1];
      logic local_icm_arb_stall [1][1];
      logic local_icm_wrp_ack [1][1];
      logic local_icm_rrp_datavalid [1][1];
      logic [31:0] local_icm_rrp_data [1][1];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [12:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(8192),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [12:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(13),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [12:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [12:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_6550577798225404749
            pred_internal_ic_6550577798225404749 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            assign bank[0].port_enable[2] = '0;
            assign bank[0].port_read[2] = '0;
            assign bank[0].port_write[2] = '0;
            assign bank[0].port_address[2] = '0;
            assign bank[0].port_writedata[2] = '0;
            assign bank[0].port_byteenable[2] = '0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace65
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [11:0] local_icm_arb_address [1][3];
      logic [63:0] local_icm_arb_writedata [1][3];
      logic [7:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [63:0] local_icm_rrp_data [1][3];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 3; __k = __k + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace65_enable[__j][__k]),
               .avm_read(local_avm_aspace65_read[__j][__k]),
               .avm_write(local_avm_aspace65_write[__j][__k]),
               .avm_address(local_avm_aspace65_address[__j][__k]),
               .avm_writedata(local_avm_aspace65_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace65_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace65_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace65_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace65_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace65_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace65_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [11:0] port_address [1:2];
            logic [63:0] port_writedata [1:2];
            logic [7:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [63:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(64),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 3; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [11:0] icm_in_arb_address [2];
            logic [63:0] icm_in_arb_writedata [2];
            logic [7:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [63:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_436961882245436591
            pred_internal_ic_436961882245436591 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_6331884978463545569
            pred_internal_ic_6331884978463545569 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace66
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [10:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace66_enable[__k][__l]),
               .avm_read(local_avm_aspace66_read[__k][__l]),
               .avm_write(local_avm_aspace66_write[__k][__l]),
               .avm_address(local_avm_aspace66_address[__k][__l]),
               .avm_writedata(local_avm_aspace66_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace66_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace66_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace66_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace66_readdatavalid[__k][__l]),
               .avm_burstcount(local_avm_aspace66_burstcount[__k][__l]),
               .avm_writeack(local_avm_aspace66_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [10:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [10:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(11),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_10366805472546480843
            pred_internal_ic_10366805472546480843 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_16559882838679203023
            pred_internal_ic_16559882838679203023 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace67
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [10:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace67_enable[__l][__m]),
               .avm_read(local_avm_aspace67_read[__l][__m]),
               .avm_write(local_avm_aspace67_write[__l][__m]),
               .avm_address(local_avm_aspace67_address[__l][__m]),
               .avm_writedata(local_avm_aspace67_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace67_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace67_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace67_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace67_readdatavalid[__l][__m]),
               .avm_burstcount(local_avm_aspace67_burstcount[__l][__m]),
               .avm_writeack(local_avm_aspace67_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [10:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [10:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(11),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_10366805472546480843
            pred_internal_ic_10366805472546480843 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_16559882838679203023
            pred_internal_ic_16559882838679203023 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace68
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [9:0] local_icm_arb_address [1][3];
      logic [63:0] local_icm_arb_writedata [1][3];
      logic [7:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [63:0] local_icm_rrp_data [1][3];

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 3; __n = __n + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace68_enable[__m][__n]),
               .avm_read(local_avm_aspace68_read[__m][__n]),
               .avm_write(local_avm_aspace68_write[__m][__n]),
               .avm_address(local_avm_aspace68_address[__m][__n]),
               .avm_writedata(local_avm_aspace68_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace68_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace68_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace68_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace68_readdatavalid[__m][__n]),
               .avm_burstcount(local_avm_aspace68_burstcount[__m][__n]),
               .avm_writeack(local_avm_aspace68_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [9:0] port_address [1:2];
            logic [63:0] port_writedata [1:2];
            logic [7:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [63:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(1024),
               .WIDTH(64),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __n = 0; __n < 3; __n = __n + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [9:0] b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(10),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [9:0] icm_in_arb_address [2];
            logic [63:0] icm_in_arb_writedata [2];
            logic [7:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [63:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_541350686802841800
            pred_internal_ic_541350686802841800 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [9:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_5731824966873737400
            pred_internal_ic_5731824966873737400 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace69
      logic local_icm_arb_request [1][1];
      logic local_icm_arb_enable [1][1];
      logic local_icm_arb_read [1][1];
      logic local_icm_arb_write [1][1];
      logic local_icm_arb_burstcount [1][1];
      logic [8:0] local_icm_arb_address [1][1];
      logic [31:0] local_icm_arb_writedata [1][1];
      logic [3:0] local_icm_arb_byteenable [1][1];
      logic local_icm_arb_stall [1][1];
      logic local_icm_wrp_ack [1][1];
      logic local_icm_rrp_datavalid [1][1];
      logic [31:0] local_icm_rrp_data [1][1];

      for( __n = 0; __n < 1; __n = __n + 1 )
      begin:local_mem_group
         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace69_enable[__n][__o]),
               .avm_read(local_avm_aspace69_read[__n][__o]),
               .avm_write(local_avm_aspace69_write[__n][__o]),
               .avm_address(local_avm_aspace69_address[__n][__o]),
               .avm_writedata(local_avm_aspace69_writedata[__n][__o]),
               .avm_byteenable(local_avm_aspace69_byteenable[__n][__o]),
               .avm_waitrequest(local_avm_aspace69_waitrequest[__n][__o]),
               .avm_readdata(local_avm_aspace69_readdata[__n][__o]),
               .avm_readdatavalid(local_avm_aspace69_readdatavalid[__n][__o]),
               .avm_burstcount(local_avm_aspace69_burstcount[__n][__o]),
               .avm_writeack(local_avm_aspace69_writeack[__n][__o]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__n][__o]),
               .ic_arb_enable(local_icm_arb_enable[__n][__o]),
               .ic_arb_read(local_icm_arb_read[__n][__o]),
               .ic_arb_write(local_icm_arb_write[__n][__o]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .ic_arb_address(local_icm_arb_address[__n][__o]),
               .ic_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .ic_arb_stall(local_icm_arb_stall[__n][__o]),
               .ic_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .ic_rrp_data(local_icm_rrp_data[__n][__o])
            );

         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [8:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(512),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [8:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(9),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__n][__o]),
               .m_arb_enable(local_icm_arb_enable[__n][__o]),
               .m_arb_read(local_icm_arb_read[__n][__o]),
               .m_arb_write(local_icm_arb_write[__n][__o]),
               .m_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .m_arb_address(local_icm_arb_address[__n][__o]),
               .m_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .m_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .m_arb_stall(local_icm_arb_stall[__n][__o]),
               .m_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .m_rrp_data(local_icm_rrp_data[__n][__o]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_2308247268906169466
            pred_internal_ic_2308247268906169466 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank0
            assign bank[0].port_enable[2] = '0;
            assign bank[0].port_read[2] = '0;
            assign bank[0].port_write[2] = '0;
            assign bank[0].port_address[2] = '0;
            assign bank[0].port_writedata[2] = '0;
            assign bank[0].port_byteenable[2] = '0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace70
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [8:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __o = 0; __o < 1; __o = __o + 1 )
      begin:local_mem_group
         for( __p = 0; __p < 2; __p = __p + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace70_enable[__o][__p]),
               .avm_read(local_avm_aspace70_read[__o][__p]),
               .avm_write(local_avm_aspace70_write[__o][__p]),
               .avm_address(local_avm_aspace70_address[__o][__p]),
               .avm_writedata(local_avm_aspace70_writedata[__o][__p]),
               .avm_byteenable(local_avm_aspace70_byteenable[__o][__p]),
               .avm_waitrequest(local_avm_aspace70_waitrequest[__o][__p]),
               .avm_readdata(local_avm_aspace70_readdata[__o][__p]),
               .avm_readdatavalid(local_avm_aspace70_readdatavalid[__o][__p]),
               .avm_burstcount(local_avm_aspace70_burstcount[__o][__p]),
               .avm_writeack(local_avm_aspace70_writeack[__o][__p]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__o][__p]),
               .ic_arb_enable(local_icm_arb_enable[__o][__p]),
               .ic_arb_read(local_icm_arb_read[__o][__p]),
               .ic_arb_write(local_icm_arb_write[__o][__p]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .ic_arb_address(local_icm_arb_address[__o][__p]),
               .ic_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .ic_arb_stall(local_icm_arb_stall[__o][__p]),
               .ic_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .ic_rrp_data(local_icm_rrp_data[__o][__p])
            );

         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [8:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(512),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __p = 0; __p < 2; __p = __p + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [8:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(9),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__o][__p]),
               .m_arb_enable(local_icm_arb_enable[__o][__p]),
               .m_arb_read(local_icm_arb_read[__o][__p]),
               .m_arb_write(local_icm_arb_write[__o][__p]),
               .m_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .m_arb_address(local_icm_arb_address[__o][__p]),
               .m_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .m_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .m_arb_stall(local_icm_arb_stall[__o][__p]),
               .m_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .m_rrp_data(local_icm_rrp_data[__o][__p]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_2308247268906169466
            pred_internal_ic_2308247268906169466 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_13390403592748929228
            pred_internal_ic_13390403592748929228 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace71
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __p = 0; __p < 1; __p = __p + 1 )
      begin:local_mem_group
         for( __q = 0; __q < 2; __q = __q + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace71_enable[__p][__q]),
               .avm_read(local_avm_aspace71_read[__p][__q]),
               .avm_write(local_avm_aspace71_write[__p][__q]),
               .avm_address(local_avm_aspace71_address[__p][__q]),
               .avm_writedata(local_avm_aspace71_writedata[__p][__q]),
               .avm_byteenable(local_avm_aspace71_byteenable[__p][__q]),
               .avm_waitrequest(local_avm_aspace71_waitrequest[__p][__q]),
               .avm_readdata(local_avm_aspace71_readdata[__p][__q]),
               .avm_readdatavalid(local_avm_aspace71_readdatavalid[__p][__q]),
               .avm_burstcount(local_avm_aspace71_burstcount[__p][__q]),
               .avm_writeack(local_avm_aspace71_writeack[__p][__q]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__p][__q]),
               .ic_arb_enable(local_icm_arb_enable[__p][__q]),
               .ic_arb_read(local_icm_arb_read[__p][__q]),
               .ic_arb_write(local_icm_arb_write[__p][__q]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .ic_arb_address(local_icm_arb_address[__p][__q]),
               .ic_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .ic_arb_stall(local_icm_arb_stall[__p][__q]),
               .ic_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .ic_rrp_data(local_icm_rrp_data[__p][__q])
            );

         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("OLD_DATA"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __q = 0; __q < 2; __q = __q + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__p][__q]),
               .m_arb_enable(local_icm_arb_enable[__p][__q]),
               .m_arb_read(local_icm_arb_read[__p][__q]),
               .m_arb_write(local_icm_arb_write[__p][__q]),
               .m_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .m_arb_address(local_icm_arb_address[__p][__q]),
               .m_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .m_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .m_arb_stall(local_icm_arb_stall[__p][__q]),
               .m_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .m_rrp_data(local_icm_rrp_data[__p][__q]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_18074945177286407557
            pred_internal_ic_18074945177286407557 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_1308630933056187501
            pred_internal_ic_1308630933056187501 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace72
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __q = 0; __q < 1; __q = __q + 1 )
      begin:local_mem_group
         for( __r = 0; __r < 2; __r = __r + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace72_enable[__q][__r]),
               .avm_read(local_avm_aspace72_read[__q][__r]),
               .avm_write(local_avm_aspace72_write[__q][__r]),
               .avm_address(local_avm_aspace72_address[__q][__r]),
               .avm_writedata(local_avm_aspace72_writedata[__q][__r]),
               .avm_byteenable(local_avm_aspace72_byteenable[__q][__r]),
               .avm_waitrequest(local_avm_aspace72_waitrequest[__q][__r]),
               .avm_readdata(local_avm_aspace72_readdata[__q][__r]),
               .avm_readdatavalid(local_avm_aspace72_readdatavalid[__q][__r]),
               .avm_burstcount(local_avm_aspace72_burstcount[__q][__r]),
               .avm_writeack(local_avm_aspace72_writeack[__q][__r]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__q][__r]),
               .ic_arb_enable(local_icm_arb_enable[__q][__r]),
               .ic_arb_read(local_icm_arb_read[__q][__r]),
               .ic_arb_write(local_icm_arb_write[__q][__r]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .ic_arb_address(local_icm_arb_address[__q][__r]),
               .ic_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .ic_arb_stall(local_icm_arb_stall[__q][__r]),
               .ic_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .ic_rrp_data(local_icm_rrp_data[__q][__r])
            );

         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __r = 0; __r < 2; __r = __r + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__q][__r]),
               .m_arb_enable(local_icm_arb_enable[__q][__r]),
               .m_arb_read(local_icm_arb_read[__q][__r]),
               .m_arb_write(local_icm_arb_write[__q][__r]),
               .m_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .m_arb_address(local_icm_arb_address[__q][__r]),
               .m_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .m_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .m_arb_stall(local_icm_arb_stall[__q][__r]),
               .m_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .m_rrp_data(local_icm_rrp_data[__q][__r]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_18074945177286407557
            pred_internal_ic_18074945177286407557 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_1308630933056187501
            pred_internal_ic_1308630933056187501 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace73
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __r = 0; __r < 1; __r = __r + 1 )
      begin:local_mem_group
         for( __s = 0; __s < 2; __s = __s + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace73_enable[__r][__s]),
               .avm_read(local_avm_aspace73_read[__r][__s]),
               .avm_write(local_avm_aspace73_write[__r][__s]),
               .avm_address(local_avm_aspace73_address[__r][__s]),
               .avm_writedata(local_avm_aspace73_writedata[__r][__s]),
               .avm_byteenable(local_avm_aspace73_byteenable[__r][__s]),
               .avm_waitrequest(local_avm_aspace73_waitrequest[__r][__s]),
               .avm_readdata(local_avm_aspace73_readdata[__r][__s]),
               .avm_readdatavalid(local_avm_aspace73_readdatavalid[__r][__s]),
               .avm_burstcount(local_avm_aspace73_burstcount[__r][__s]),
               .avm_writeack(local_avm_aspace73_writeack[__r][__s]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__r][__s]),
               .ic_arb_enable(local_icm_arb_enable[__r][__s]),
               .ic_arb_read(local_icm_arb_read[__r][__s]),
               .ic_arb_write(local_icm_arb_write[__r][__s]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .ic_arb_address(local_icm_arb_address[__r][__s]),
               .ic_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .ic_arb_stall(local_icm_arb_stall[__r][__s]),
               .ic_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .ic_rrp_data(local_icm_rrp_data[__r][__s])
            );

         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("OLD_DATA"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __s = 0; __s < 2; __s = __s + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__r][__s]),
               .m_arb_enable(local_icm_arb_enable[__r][__s]),
               .m_arb_read(local_icm_arb_read[__r][__s]),
               .m_arb_write(local_icm_arb_write[__r][__s]),
               .m_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .m_arb_address(local_icm_arb_address[__r][__s]),
               .m_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .m_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .m_arb_stall(local_icm_arb_stall[__r][__s]),
               .m_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .m_rrp_data(local_icm_rrp_data[__r][__s]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_18074945177286407557
            pred_internal_ic_18074945177286407557 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_1308630933056187501
            pred_internal_ic_1308630933056187501 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace74
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [6:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __s = 0; __s < 1; __s = __s + 1 )
      begin:local_mem_group
         for( __t = 0; __t < 2; __t = __t + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace74_enable[__s][__t]),
               .avm_read(local_avm_aspace74_read[__s][__t]),
               .avm_write(local_avm_aspace74_write[__s][__t]),
               .avm_address(local_avm_aspace74_address[__s][__t]),
               .avm_writedata(local_avm_aspace74_writedata[__s][__t]),
               .avm_byteenable(local_avm_aspace74_byteenable[__s][__t]),
               .avm_waitrequest(local_avm_aspace74_waitrequest[__s][__t]),
               .avm_readdata(local_avm_aspace74_readdata[__s][__t]),
               .avm_readdatavalid(local_avm_aspace74_readdatavalid[__s][__t]),
               .avm_burstcount(local_avm_aspace74_burstcount[__s][__t]),
               .avm_writeack(local_avm_aspace74_writeack[__s][__t]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__s][__t]),
               .ic_arb_enable(local_icm_arb_enable[__s][__t]),
               .ic_arb_read(local_icm_arb_read[__s][__t]),
               .ic_arb_write(local_icm_arb_write[__s][__t]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .ic_arb_address(local_icm_arb_address[__s][__t]),
               .ic_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .ic_arb_stall(local_icm_arb_stall[__s][__t]),
               .ic_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .ic_rrp_data(local_icm_rrp_data[__s][__t])
            );

         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __t = 0; __t < 2; __t = __t + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__s][__t]),
               .m_arb_enable(local_icm_arb_enable[__s][__t]),
               .m_arb_read(local_icm_arb_read[__s][__t]),
               .m_arb_write(local_icm_arb_write[__s][__t]),
               .m_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .m_arb_address(local_icm_arb_address[__s][__t]),
               .m_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .m_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .m_arb_stall(local_icm_arb_stall[__s][__t]),
               .m_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .m_rrp_data(local_icm_rrp_data[__s][__t]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_18074945177286407557
            pred_internal_ic_18074945177286407557 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_1308630933056187501
            pred_internal_ic_1308630933056187501 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace75
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [9:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __t = 0; __t < 1; __t = __t + 1 )
      begin:local_mem_group
         for( __u = 0; __u < 3; __u = __u + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace75_enable[__t][__u]),
               .avm_read(local_avm_aspace75_read[__t][__u]),
               .avm_write(local_avm_aspace75_write[__t][__u]),
               .avm_address(local_avm_aspace75_address[__t][__u]),
               .avm_writedata(local_avm_aspace75_writedata[__t][__u]),
               .avm_byteenable(local_avm_aspace75_byteenable[__t][__u]),
               .avm_waitrequest(local_avm_aspace75_waitrequest[__t][__u]),
               .avm_readdata(local_avm_aspace75_readdata[__t][__u]),
               .avm_readdatavalid(local_avm_aspace75_readdatavalid[__t][__u]),
               .avm_burstcount(local_avm_aspace75_burstcount[__t][__u]),
               .avm_writeack(local_avm_aspace75_writeack[__t][__u]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__t][__u]),
               .ic_arb_enable(local_icm_arb_enable[__t][__u]),
               .ic_arb_read(local_icm_arb_read[__t][__u]),
               .ic_arb_write(local_icm_arb_write[__t][__u]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .ic_arb_address(local_icm_arb_address[__t][__u]),
               .ic_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .ic_arb_stall(local_icm_arb_stall[__t][__u]),
               .ic_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .ic_rrp_data(local_icm_rrp_data[__t][__u])
            );

         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [9:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(1024),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __u = 0; __u < 3; __u = __u + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [9:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(10),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__t][__u]),
               .m_arb_enable(local_icm_arb_enable[__t][__u]),
               .m_arb_read(local_icm_arb_read[__t][__u]),
               .m_arb_write(local_icm_arb_write[__t][__u]),
               .m_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .m_arb_address(local_icm_arb_address[__t][__u]),
               .m_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .m_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .m_arb_stall(local_icm_arb_stall[__t][__u]),
               .m_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .m_rrp_data(local_icm_rrp_data[__t][__u]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [9:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_6548927278576014337
            pred_internal_ic_6548927278576014337 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [9:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_11060800092696973562
            pred_internal_ic_11060800092696973562 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace76
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [2:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __u = 0; __u < 1; __u = __u + 1 )
      begin:local_mem_group
         for( __v = 0; __v < 3; __v = __v + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace76_enable[__u][__v]),
               .avm_read(local_avm_aspace76_read[__u][__v]),
               .avm_write(local_avm_aspace76_write[__u][__v]),
               .avm_address(local_avm_aspace76_address[__u][__v]),
               .avm_writedata(local_avm_aspace76_writedata[__u][__v]),
               .avm_byteenable(local_avm_aspace76_byteenable[__u][__v]),
               .avm_waitrequest(local_avm_aspace76_waitrequest[__u][__v]),
               .avm_readdata(local_avm_aspace76_readdata[__u][__v]),
               .avm_readdatavalid(local_avm_aspace76_readdatavalid[__u][__v]),
               .avm_burstcount(local_avm_aspace76_burstcount[__u][__v]),
               .avm_writeack(local_avm_aspace76_writeack[__u][__v]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__u][__v]),
               .ic_arb_enable(local_icm_arb_enable[__u][__v]),
               .ic_arb_read(local_icm_arb_read[__u][__v]),
               .ic_arb_write(local_icm_arb_write[__u][__v]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .ic_arb_address(local_icm_arb_address[__u][__v]),
               .ic_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .ic_arb_stall(local_icm_arb_stall[__u][__v]),
               .ic_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .ic_rrp_data(local_icm_rrp_data[__u][__v])
            );

         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [2:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(8),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __v = 0; __v < 3; __v = __v + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [2:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(3),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__u][__v]),
               .m_arb_enable(local_icm_arb_enable[__u][__v]),
               .m_arb_read(local_icm_arb_read[__u][__v]),
               .m_arb_write(local_icm_arb_write[__u][__v]),
               .m_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .m_arb_address(local_icm_arb_address[__u][__v]),
               .m_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .m_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .m_arb_stall(local_icm_arb_stall[__u][__v]),
               .m_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .m_rrp_data(local_icm_rrp_data[__u][__v]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_2764124807778363877
            pred_internal_ic_2764124807778363877 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [2:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_17471860364748594150
            pred_internal_ic_17471860364748594150 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace77
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [2:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __v = 0; __v < 1; __v = __v + 1 )
      begin:local_mem_group
         for( __w = 0; __w < 3; __w = __w + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace77_enable[__v][__w]),
               .avm_read(local_avm_aspace77_read[__v][__w]),
               .avm_write(local_avm_aspace77_write[__v][__w]),
               .avm_address(local_avm_aspace77_address[__v][__w]),
               .avm_writedata(local_avm_aspace77_writedata[__v][__w]),
               .avm_byteenable(local_avm_aspace77_byteenable[__v][__w]),
               .avm_waitrequest(local_avm_aspace77_waitrequest[__v][__w]),
               .avm_readdata(local_avm_aspace77_readdata[__v][__w]),
               .avm_readdatavalid(local_avm_aspace77_readdatavalid[__v][__w]),
               .avm_burstcount(local_avm_aspace77_burstcount[__v][__w]),
               .avm_writeack(local_avm_aspace77_writeack[__v][__w]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__v][__w]),
               .ic_arb_enable(local_icm_arb_enable[__v][__w]),
               .ic_arb_read(local_icm_arb_read[__v][__w]),
               .ic_arb_write(local_icm_arb_write[__v][__w]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .ic_arb_address(local_icm_arb_address[__v][__w]),
               .ic_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .ic_arb_stall(local_icm_arb_stall[__v][__w]),
               .ic_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .ic_rrp_data(local_icm_rrp_data[__v][__w])
            );

         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [2:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(8),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __w = 0; __w < 3; __w = __w + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [2:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(3),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__v][__w]),
               .m_arb_enable(local_icm_arb_enable[__v][__w]),
               .m_arb_read(local_icm_arb_read[__v][__w]),
               .m_arb_write(local_icm_arb_write[__v][__w]),
               .m_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .m_arb_address(local_icm_arb_address[__v][__w]),
               .m_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .m_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .m_arb_stall(local_icm_arb_stall[__v][__w]),
               .m_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .m_rrp_data(local_icm_rrp_data[__v][__w]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_2764124807778363877
            pred_internal_ic_2764124807778363877 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [2:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_3592563112433355308
            pred_internal_ic_3592563112433355308 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace78
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [11:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __w = 0; __w < 1; __w = __w + 1 )
      begin:local_mem_group
         for( __x = 0; __x < 3; __x = __x + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace78_enable[__w][__x]),
               .avm_read(local_avm_aspace78_read[__w][__x]),
               .avm_write(local_avm_aspace78_write[__w][__x]),
               .avm_address(local_avm_aspace78_address[__w][__x]),
               .avm_writedata(local_avm_aspace78_writedata[__w][__x]),
               .avm_byteenable(local_avm_aspace78_byteenable[__w][__x]),
               .avm_waitrequest(local_avm_aspace78_waitrequest[__w][__x]),
               .avm_readdata(local_avm_aspace78_readdata[__w][__x]),
               .avm_readdatavalid(local_avm_aspace78_readdatavalid[__w][__x]),
               .avm_burstcount(local_avm_aspace78_burstcount[__w][__x]),
               .avm_writeack(local_avm_aspace78_writeack[__w][__x]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__w][__x]),
               .ic_arb_enable(local_icm_arb_enable[__w][__x]),
               .ic_arb_read(local_icm_arb_read[__w][__x]),
               .ic_arb_write(local_icm_arb_write[__w][__x]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__w][__x]),
               .ic_arb_address(local_icm_arb_address[__w][__x]),
               .ic_arb_writedata(local_icm_arb_writedata[__w][__x]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__w][__x]),
               .ic_arb_stall(local_icm_arb_stall[__w][__x]),
               .ic_wrp_ack(local_icm_wrp_ack[__w][__x]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__w][__x]),
               .ic_rrp_data(local_icm_rrp_data[__w][__x])
            );

         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [11:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __x = 0; __x < 3; __x = __x + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__w][__x]),
               .m_arb_enable(local_icm_arb_enable[__w][__x]),
               .m_arb_read(local_icm_arb_read[__w][__x]),
               .m_arb_write(local_icm_arb_write[__w][__x]),
               .m_arb_burstcount(local_icm_arb_burstcount[__w][__x]),
               .m_arb_address(local_icm_arb_address[__w][__x]),
               .m_arb_writedata(local_icm_arb_writedata[__w][__x]),
               .m_arb_byteenable(local_icm_arb_byteenable[__w][__x]),
               .m_arb_stall(local_icm_arb_stall[__w][__x]),
               .m_wrp_ack(local_icm_wrp_ack[__w][__x]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__w][__x]),
               .m_rrp_data(local_icm_rrp_data[__w][__x]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_10256168573720742934
            pred_internal_ic_10256168573720742934 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [11:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_2142062881273931363
            pred_internal_ic_2142062881273931363 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace79
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [3:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __x = 0; __x < 1; __x = __x + 1 )
      begin:local_mem_group
         for( __y = 0; __y < 3; __y = __y + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace79_enable[__x][__y]),
               .avm_read(local_avm_aspace79_read[__x][__y]),
               .avm_write(local_avm_aspace79_write[__x][__y]),
               .avm_address(local_avm_aspace79_address[__x][__y]),
               .avm_writedata(local_avm_aspace79_writedata[__x][__y]),
               .avm_byteenable(local_avm_aspace79_byteenable[__x][__y]),
               .avm_waitrequest(local_avm_aspace79_waitrequest[__x][__y]),
               .avm_readdata(local_avm_aspace79_readdata[__x][__y]),
               .avm_readdatavalid(local_avm_aspace79_readdatavalid[__x][__y]),
               .avm_burstcount(local_avm_aspace79_burstcount[__x][__y]),
               .avm_writeack(local_avm_aspace79_writeack[__x][__y]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__x][__y]),
               .ic_arb_enable(local_icm_arb_enable[__x][__y]),
               .ic_arb_read(local_icm_arb_read[__x][__y]),
               .ic_arb_write(local_icm_arb_write[__x][__y]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__x][__y]),
               .ic_arb_address(local_icm_arb_address[__x][__y]),
               .ic_arb_writedata(local_icm_arb_writedata[__x][__y]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__x][__y]),
               .ic_arb_stall(local_icm_arb_stall[__x][__y]),
               .ic_wrp_ack(local_icm_wrp_ack[__x][__y]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__x][__y]),
               .ic_rrp_data(local_icm_rrp_data[__x][__y])
            );

         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [3:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(16),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __y = 0; __y < 3; __y = __y + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [3:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(4),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__x][__y]),
               .m_arb_enable(local_icm_arb_enable[__x][__y]),
               .m_arb_read(local_icm_arb_read[__x][__y]),
               .m_arb_write(local_icm_arb_write[__x][__y]),
               .m_arb_burstcount(local_icm_arb_burstcount[__x][__y]),
               .m_arb_address(local_icm_arb_address[__x][__y]),
               .m_arb_writedata(local_icm_arb_writedata[__x][__y]),
               .m_arb_byteenable(local_icm_arb_byteenable[__x][__y]),
               .m_arb_stall(local_icm_arb_stall[__x][__y]),
               .m_wrp_ack(local_icm_wrp_ack[__x][__y]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__x][__y]),
               .m_rrp_data(local_icm_rrp_data[__x][__y]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_5718809285394768584
            pred_internal_ic_5718809285394768584 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [3:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_5163016244742205009
            pred_internal_ic_5163016244742205009 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace80
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [15:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __y = 0; __y < 1; __y = __y + 1 )
      begin:local_mem_group
         for( __z = 0; __z < 3; __z = __z + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace80_enable[__y][__z]),
               .avm_read(local_avm_aspace80_read[__y][__z]),
               .avm_write(local_avm_aspace80_write[__y][__z]),
               .avm_address(local_avm_aspace80_address[__y][__z]),
               .avm_writedata(local_avm_aspace80_writedata[__y][__z]),
               .avm_byteenable(local_avm_aspace80_byteenable[__y][__z]),
               .avm_waitrequest(local_avm_aspace80_waitrequest[__y][__z]),
               .avm_readdata(local_avm_aspace80_readdata[__y][__z]),
               .avm_readdatavalid(local_avm_aspace80_readdatavalid[__y][__z]),
               .avm_burstcount(local_avm_aspace80_burstcount[__y][__z]),
               .avm_writeack(local_avm_aspace80_writeack[__y][__z]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__y][__z]),
               .ic_arb_enable(local_icm_arb_enable[__y][__z]),
               .ic_arb_read(local_icm_arb_read[__y][__z]),
               .ic_arb_write(local_icm_arb_write[__y][__z]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__y][__z]),
               .ic_arb_address(local_icm_arb_address[__y][__z]),
               .ic_arb_writedata(local_icm_arb_writedata[__y][__z]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__y][__z]),
               .ic_arb_stall(local_icm_arb_stall[__y][__z]),
               .ic_wrp_ack(local_icm_wrp_ack[__y][__z]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__y][__z]),
               .ic_rrp_data(local_icm_rrp_data[__y][__z])
            );

         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [15:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(65536),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __z = 0; __z < 3; __z = __z + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [15:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(16),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__y][__z]),
               .m_arb_enable(local_icm_arb_enable[__y][__z]),
               .m_arb_read(local_icm_arb_read[__y][__z]),
               .m_arb_write(local_icm_arb_write[__y][__z]),
               .m_arb_burstcount(local_icm_arb_burstcount[__y][__z]),
               .m_arb_address(local_icm_arb_address[__y][__z]),
               .m_arb_writedata(local_icm_arb_writedata[__y][__z]),
               .m_arb_byteenable(local_icm_arb_byteenable[__y][__z]),
               .m_arb_stall(local_icm_arb_stall[__y][__z]),
               .m_wrp_ack(local_icm_wrp_ack[__y][__z]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__y][__z]),
               .m_rrp_data(local_icm_rrp_data[__y][__z]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [15:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [15:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_12817316525020403601
            pred_internal_ic_12817316525020403601 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [15:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [15:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_4871513082236474939
            pred_internal_ic_4871513082236474939 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace81
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [6:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __z = 0; __z < 1; __z = __z + 1 )
      begin:local_mem_group
         for( __a = 0; __a < 3; __a = __a + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace81_enable[__z][__a]),
               .avm_read(local_avm_aspace81_read[__z][__a]),
               .avm_write(local_avm_aspace81_write[__z][__a]),
               .avm_address(local_avm_aspace81_address[__z][__a]),
               .avm_writedata(local_avm_aspace81_writedata[__z][__a]),
               .avm_byteenable(local_avm_aspace81_byteenable[__z][__a]),
               .avm_waitrequest(local_avm_aspace81_waitrequest[__z][__a]),
               .avm_readdata(local_avm_aspace81_readdata[__z][__a]),
               .avm_readdatavalid(local_avm_aspace81_readdatavalid[__z][__a]),
               .avm_burstcount(local_avm_aspace81_burstcount[__z][__a]),
               .avm_writeack(local_avm_aspace81_writeack[__z][__a]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__z][__a]),
               .ic_arb_enable(local_icm_arb_enable[__z][__a]),
               .ic_arb_read(local_icm_arb_read[__z][__a]),
               .ic_arb_write(local_icm_arb_write[__z][__a]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__z][__a]),
               .ic_arb_address(local_icm_arb_address[__z][__a]),
               .ic_arb_writedata(local_icm_arb_writedata[__z][__a]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__z][__a]),
               .ic_arb_stall(local_icm_arb_stall[__z][__a]),
               .ic_wrp_ack(local_icm_wrp_ack[__z][__a]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__z][__a]),
               .ic_rrp_data(local_icm_rrp_data[__z][__a])
            );

         end

         for( __a = 0; __a < 1; __a = __a + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __a = 0; __a < 3; __a = __a + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__z][__a]),
               .m_arb_enable(local_icm_arb_enable[__z][__a]),
               .m_arb_read(local_icm_arb_read[__z][__a]),
               .m_arb_write(local_icm_arb_write[__z][__a]),
               .m_arb_burstcount(local_icm_arb_burstcount[__z][__a]),
               .m_arb_address(local_icm_arb_address[__z][__a]),
               .m_arb_writedata(local_icm_arb_writedata[__z][__a]),
               .m_arb_byteenable(local_icm_arb_byteenable[__z][__a]),
               .m_arb_stall(local_icm_arb_stall[__z][__a]),
               .m_wrp_ack(local_icm_wrp_ack[__z][__a]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__z][__a]),
               .m_rrp_data(local_icm_rrp_data[__z][__a]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __a = 0; __a < 1; __a = __a + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_12932242956988762943
            pred_internal_ic_12932242956988762943 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __a = 0; __a < 1; __a = __a + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_14310758934137196059
            pred_internal_ic_14310758934137196059 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace82
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [13:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __a = 0; __a < 1; __a = __a + 1 )
      begin:local_mem_group
         for( __b = 0; __b < 3; __b = __b + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace82_enable[__a][__b]),
               .avm_read(local_avm_aspace82_read[__a][__b]),
               .avm_write(local_avm_aspace82_write[__a][__b]),
               .avm_address(local_avm_aspace82_address[__a][__b]),
               .avm_writedata(local_avm_aspace82_writedata[__a][__b]),
               .avm_byteenable(local_avm_aspace82_byteenable[__a][__b]),
               .avm_waitrequest(local_avm_aspace82_waitrequest[__a][__b]),
               .avm_readdata(local_avm_aspace82_readdata[__a][__b]),
               .avm_readdatavalid(local_avm_aspace82_readdatavalid[__a][__b]),
               .avm_burstcount(local_avm_aspace82_burstcount[__a][__b]),
               .avm_writeack(local_avm_aspace82_writeack[__a][__b]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__a][__b]),
               .ic_arb_enable(local_icm_arb_enable[__a][__b]),
               .ic_arb_read(local_icm_arb_read[__a][__b]),
               .ic_arb_write(local_icm_arb_write[__a][__b]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__a][__b]),
               .ic_arb_address(local_icm_arb_address[__a][__b]),
               .ic_arb_writedata(local_icm_arb_writedata[__a][__b]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__a][__b]),
               .ic_arb_stall(local_icm_arb_stall[__a][__b]),
               .ic_wrp_ack(local_icm_wrp_ack[__a][__b]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__a][__b]),
               .ic_rrp_data(local_icm_rrp_data[__a][__b])
            );

         end

         for( __b = 0; __b < 1; __b = __b + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [13:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(16384),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __b = 0; __b < 3; __b = __b + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [13:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(14),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__a][__b]),
               .m_arb_enable(local_icm_arb_enable[__a][__b]),
               .m_arb_read(local_icm_arb_read[__a][__b]),
               .m_arb_write(local_icm_arb_write[__a][__b]),
               .m_arb_burstcount(local_icm_arb_burstcount[__a][__b]),
               .m_arb_address(local_icm_arb_address[__a][__b]),
               .m_arb_writedata(local_icm_arb_writedata[__a][__b]),
               .m_arb_byteenable(local_icm_arb_byteenable[__a][__b]),
               .m_arb_stall(local_icm_arb_stall[__a][__b]),
               .m_wrp_ack(local_icm_wrp_ack[__a][__b]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__a][__b]),
               .m_rrp_data(local_icm_rrp_data[__a][__b]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __b = 0; __b < 1; __b = __b + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_15833804371765284757
            pred_internal_ic_15833804371765284757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __b = 0; __b < 1; __b = __b + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [13:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_3314512764160165735
            pred_internal_ic_3314512764160165735 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace83
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [6:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __b = 0; __b < 1; __b = __b + 1 )
      begin:local_mem_group
         for( __c = 0; __c < 3; __c = __c + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace83_enable[__b][__c]),
               .avm_read(local_avm_aspace83_read[__b][__c]),
               .avm_write(local_avm_aspace83_write[__b][__c]),
               .avm_address(local_avm_aspace83_address[__b][__c]),
               .avm_writedata(local_avm_aspace83_writedata[__b][__c]),
               .avm_byteenable(local_avm_aspace83_byteenable[__b][__c]),
               .avm_waitrequest(local_avm_aspace83_waitrequest[__b][__c]),
               .avm_readdata(local_avm_aspace83_readdata[__b][__c]),
               .avm_readdatavalid(local_avm_aspace83_readdatavalid[__b][__c]),
               .avm_burstcount(local_avm_aspace83_burstcount[__b][__c]),
               .avm_writeack(local_avm_aspace83_writeack[__b][__c]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__b][__c]),
               .ic_arb_enable(local_icm_arb_enable[__b][__c]),
               .ic_arb_read(local_icm_arb_read[__b][__c]),
               .ic_arb_write(local_icm_arb_write[__b][__c]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__b][__c]),
               .ic_arb_address(local_icm_arb_address[__b][__c]),
               .ic_arb_writedata(local_icm_arb_writedata[__b][__c]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__b][__c]),
               .ic_arb_stall(local_icm_arb_stall[__b][__c]),
               .ic_wrp_ack(local_icm_wrp_ack[__b][__c]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__b][__c]),
               .ic_rrp_data(local_icm_rrp_data[__b][__c])
            );

         end

         for( __c = 0; __c < 1; __c = __c + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [6:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __c = 0; __c < 3; __c = __c + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [6:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__b][__c]),
               .m_arb_enable(local_icm_arb_enable[__b][__c]),
               .m_arb_read(local_icm_arb_read[__b][__c]),
               .m_arb_write(local_icm_arb_write[__b][__c]),
               .m_arb_burstcount(local_icm_arb_burstcount[__b][__c]),
               .m_arb_address(local_icm_arb_address[__b][__c]),
               .m_arb_writedata(local_icm_arb_writedata[__b][__c]),
               .m_arb_byteenable(local_icm_arb_byteenable[__b][__c]),
               .m_arb_stall(local_icm_arb_stall[__b][__c]),
               .m_wrp_ack(local_icm_wrp_ack[__b][__c]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__b][__c]),
               .m_rrp_data(local_icm_rrp_data[__b][__c]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __c = 0; __c < 1; __c = __c + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_12932242956988762943
            pred_internal_ic_12932242956988762943 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __c = 0; __c < 1; __c = __c + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_14310758934137196059
            pred_internal_ic_14310758934137196059 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace84
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [9:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __c = 0; __c < 1; __c = __c + 1 )
      begin:local_mem_group
         for( __d = 0; __d < 3; __d = __d + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace84_enable[__c][__d]),
               .avm_read(local_avm_aspace84_read[__c][__d]),
               .avm_write(local_avm_aspace84_write[__c][__d]),
               .avm_address(local_avm_aspace84_address[__c][__d]),
               .avm_writedata(local_avm_aspace84_writedata[__c][__d]),
               .avm_byteenable(local_avm_aspace84_byteenable[__c][__d]),
               .avm_waitrequest(local_avm_aspace84_waitrequest[__c][__d]),
               .avm_readdata(local_avm_aspace84_readdata[__c][__d]),
               .avm_readdatavalid(local_avm_aspace84_readdatavalid[__c][__d]),
               .avm_burstcount(local_avm_aspace84_burstcount[__c][__d]),
               .avm_writeack(local_avm_aspace84_writeack[__c][__d]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__c][__d]),
               .ic_arb_enable(local_icm_arb_enable[__c][__d]),
               .ic_arb_read(local_icm_arb_read[__c][__d]),
               .ic_arb_write(local_icm_arb_write[__c][__d]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__c][__d]),
               .ic_arb_address(local_icm_arb_address[__c][__d]),
               .ic_arb_writedata(local_icm_arb_writedata[__c][__d]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__c][__d]),
               .ic_arb_stall(local_icm_arb_stall[__c][__d]),
               .ic_wrp_ack(local_icm_wrp_ack[__c][__d]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__c][__d]),
               .ic_rrp_data(local_icm_rrp_data[__c][__d])
            );

         end

         for( __d = 0; __d < 1; __d = __d + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [9:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(1024),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __d = 0; __d < 3; __d = __d + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [9:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(10),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__c][__d]),
               .m_arb_enable(local_icm_arb_enable[__c][__d]),
               .m_arb_read(local_icm_arb_read[__c][__d]),
               .m_arb_write(local_icm_arb_write[__c][__d]),
               .m_arb_burstcount(local_icm_arb_burstcount[__c][__d]),
               .m_arb_address(local_icm_arb_address[__c][__d]),
               .m_arb_writedata(local_icm_arb_writedata[__c][__d]),
               .m_arb_byteenable(local_icm_arb_byteenable[__c][__d]),
               .m_arb_stall(local_icm_arb_stall[__c][__d]),
               .m_wrp_ack(local_icm_wrp_ack[__c][__d]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__c][__d]),
               .m_rrp_data(local_icm_rrp_data[__c][__d]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __d = 0; __d < 1; __d = __d + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [9:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_6548927278576014337
            pred_internal_ic_6548927278576014337 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __d = 0; __d < 1; __d = __d + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [9:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_8346289868720134646
            pred_internal_ic_8346289868720134646 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace85
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [3:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __d = 0; __d < 1; __d = __d + 1 )
      begin:local_mem_group
         for( __e = 0; __e < 3; __e = __e + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace85_enable[__d][__e]),
               .avm_read(local_avm_aspace85_read[__d][__e]),
               .avm_write(local_avm_aspace85_write[__d][__e]),
               .avm_address(local_avm_aspace85_address[__d][__e]),
               .avm_writedata(local_avm_aspace85_writedata[__d][__e]),
               .avm_byteenable(local_avm_aspace85_byteenable[__d][__e]),
               .avm_waitrequest(local_avm_aspace85_waitrequest[__d][__e]),
               .avm_readdata(local_avm_aspace85_readdata[__d][__e]),
               .avm_readdatavalid(local_avm_aspace85_readdatavalid[__d][__e]),
               .avm_burstcount(local_avm_aspace85_burstcount[__d][__e]),
               .avm_writeack(local_avm_aspace85_writeack[__d][__e]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__d][__e]),
               .ic_arb_enable(local_icm_arb_enable[__d][__e]),
               .ic_arb_read(local_icm_arb_read[__d][__e]),
               .ic_arb_write(local_icm_arb_write[__d][__e]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__d][__e]),
               .ic_arb_address(local_icm_arb_address[__d][__e]),
               .ic_arb_writedata(local_icm_arb_writedata[__d][__e]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__d][__e]),
               .ic_arb_stall(local_icm_arb_stall[__d][__e]),
               .ic_wrp_ack(local_icm_wrp_ack[__d][__e]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__d][__e]),
               .ic_rrp_data(local_icm_rrp_data[__d][__e])
            );

         end

         for( __e = 0; __e < 1; __e = __e + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [3:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(16),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __e = 0; __e < 3; __e = __e + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [3:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(4),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__d][__e]),
               .m_arb_enable(local_icm_arb_enable[__d][__e]),
               .m_arb_read(local_icm_arb_read[__d][__e]),
               .m_arb_write(local_icm_arb_write[__d][__e]),
               .m_arb_burstcount(local_icm_arb_burstcount[__d][__e]),
               .m_arb_address(local_icm_arb_address[__d][__e]),
               .m_arb_writedata(local_icm_arb_writedata[__d][__e]),
               .m_arb_byteenable(local_icm_arb_byteenable[__d][__e]),
               .m_arb_stall(local_icm_arb_stall[__d][__e]),
               .m_wrp_ack(local_icm_wrp_ack[__d][__e]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__d][__e]),
               .m_rrp_data(local_icm_rrp_data[__d][__e]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __e = 0; __e < 1; __e = __e + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_5718809285394768584
            pred_internal_ic_5718809285394768584 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __e = 0; __e < 1; __e = __e + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [3:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_5163016244742205009
            pred_internal_ic_5163016244742205009 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace86
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [3:0] local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __e = 0; __e < 1; __e = __e + 1 )
      begin:local_mem_group
         for( __f = 0; __f < 3; __f = __f + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace86_enable[__e][__f]),
               .avm_read(local_avm_aspace86_read[__e][__f]),
               .avm_write(local_avm_aspace86_write[__e][__f]),
               .avm_address(local_avm_aspace86_address[__e][__f]),
               .avm_writedata(local_avm_aspace86_writedata[__e][__f]),
               .avm_byteenable(local_avm_aspace86_byteenable[__e][__f]),
               .avm_waitrequest(local_avm_aspace86_waitrequest[__e][__f]),
               .avm_readdata(local_avm_aspace86_readdata[__e][__f]),
               .avm_readdatavalid(local_avm_aspace86_readdatavalid[__e][__f]),
               .avm_burstcount(local_avm_aspace86_burstcount[__e][__f]),
               .avm_writeack(local_avm_aspace86_writeack[__e][__f]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__e][__f]),
               .ic_arb_enable(local_icm_arb_enable[__e][__f]),
               .ic_arb_read(local_icm_arb_read[__e][__f]),
               .ic_arb_write(local_icm_arb_write[__e][__f]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__e][__f]),
               .ic_arb_address(local_icm_arb_address[__e][__f]),
               .ic_arb_writedata(local_icm_arb_writedata[__e][__f]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__e][__f]),
               .ic_arb_stall(local_icm_arb_stall[__e][__f]),
               .ic_wrp_ack(local_icm_wrp_ack[__e][__f]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__e][__f]),
               .ic_rrp_data(local_icm_rrp_data[__e][__f])
            );

         end

         for( __f = 0; __f < 1; __f = __f + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [3:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(16),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __f = 0; __f < 3; __f = __f + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [3:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(4),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__e][__f]),
               .m_arb_enable(local_icm_arb_enable[__e][__f]),
               .m_arb_read(local_icm_arb_read[__e][__f]),
               .m_arb_write(local_icm_arb_write[__e][__f]),
               .m_arb_burstcount(local_icm_arb_burstcount[__e][__f]),
               .m_arb_address(local_icm_arb_address[__e][__f]),
               .m_arb_writedata(local_icm_arb_writedata[__e][__f]),
               .m_arb_byteenable(local_icm_arb_byteenable[__e][__f]),
               .m_arb_stall(local_icm_arb_stall[__e][__f]),
               .m_wrp_ack(local_icm_wrp_ack[__e][__f]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__e][__f]),
               .m_rrp_data(local_icm_rrp_data[__e][__f]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __f = 0; __f < 1; __f = __f + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [3:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of pred_internal_ic_8024953814504338982
            pred_internal_ic_8024953814504338982 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __f = 0; __f < 1; __f = __f + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of pred_internal_ic_9193764999228880356
            pred_internal_ic_9193764999228880356 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_6550577798225404749
/////////////////////////////////////////////////////////////////
module pred_internal_ic_6550577798225404749
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [12:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [12:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(13),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(13),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_436961882245436591
/////////////////////////////////////////////////////////////////
module pred_internal_ic_436961882245436591
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [11:0] m_arb_address [2],
   input logic [63:0] m_arb_writedata [2],
   input logic [7:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [63:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_6331884978463545569
/////////////////////////////////////////////////////////////////
module pred_internal_ic_6331884978463545569
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_10366805472546480843
/////////////////////////////////////////////////////////////////
module pred_internal_ic_10366805472546480843
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_16559882838679203023
/////////////////////////////////////////////////////////////////
module pred_internal_ic_16559882838679203023
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_541350686802841800
/////////////////////////////////////////////////////////////////
module pred_internal_ic_541350686802841800
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [9:0] m_arb_address [2],
   input logic [63:0] m_arb_writedata [2],
   input logic [7:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [63:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_5731824966873737400
/////////////////////////////////////////////////////////////////
module pred_internal_ic_5731824966873737400
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [9:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_2308247268906169466
/////////////////////////////////////////////////////////////////
module pred_internal_ic_2308247268906169466
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_13390403592748929228
/////////////////////////////////////////////////////////////////
module pred_internal_ic_13390403592748929228
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_18074945177286407557
/////////////////////////////////////////////////////////////////
module pred_internal_ic_18074945177286407557
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_1308630933056187501
/////////////////////////////////////////////////////////////////
module pred_internal_ic_1308630933056187501
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_6548927278576014337
/////////////////////////////////////////////////////////////////
module pred_internal_ic_6548927278576014337
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [9:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_11060800092696973562
/////////////////////////////////////////////////////////////////
module pred_internal_ic_11060800092696973562
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [9:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_2764124807778363877
/////////////////////////////////////////////////////////////////
module pred_internal_ic_2764124807778363877
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [2:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_17471860364748594150
/////////////////////////////////////////////////////////////////
module pred_internal_ic_17471860364748594150
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [2:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_3592563112433355308
/////////////////////////////////////////////////////////////////
module pred_internal_ic_3592563112433355308
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [2:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_10256168573720742934
/////////////////////////////////////////////////////////////////
module pred_internal_ic_10256168573720742934
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_2142062881273931363
/////////////////////////////////////////////////////////////////
module pred_internal_ic_2142062881273931363
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [11:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_5718809285394768584
/////////////////////////////////////////////////////////////////
module pred_internal_ic_5718809285394768584
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_5163016244742205009
/////////////////////////////////////////////////////////////////
module pred_internal_ic_5163016244742205009
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [3:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_12817316525020403601
/////////////////////////////////////////////////////////////////
module pred_internal_ic_12817316525020403601
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [15:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [15:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_4871513082236474939
/////////////////////////////////////////////////////////////////
module pred_internal_ic_4871513082236474939
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [15:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [15:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(16),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(16),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_12932242956988762943
/////////////////////////////////////////////////////////////////
module pred_internal_ic_12932242956988762943
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_14310758934137196059
/////////////////////////////////////////////////////////////////
module pred_internal_ic_14310758934137196059
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [6:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_15833804371765284757
/////////////////////////////////////////////////////////////////
module pred_internal_ic_15833804371765284757
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [13:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [13:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_3314512764160165735
/////////////////////////////////////////////////////////////////
module pred_internal_ic_3314512764160165735
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [13:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [13:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_8346289868720134646
/////////////////////////////////////////////////////////////////
module pred_internal_ic_8346289868720134646
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [9:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_8024953814504338982
/////////////////////////////////////////////////////////////////
module pred_internal_ic_8024953814504338982
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [3:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pred_internal_ic_9193764999228880356
/////////////////////////////////////////////////////////////////
module pred_internal_ic_9193764999228880356
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

